// <auto-generated />
using System;
using Chocolate.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Chocolate.DataAccess.Migrations
{
    [DbContext(typeof(ChocolateDbContext))]
    [Migration("20210411082950_InitialWithSeed")]
    partial class InitialWithSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Chocolate.DataAccess.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("AddressNumber")
                        .HasMaxLength(100)
                        .HasColumnType("smallint");

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("PostCode")
                        .HasMaxLength(100)
                        .HasColumnType("smallint");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressNumber = (short)3,
                            Comments = "Our First Warehouse",
                            Country = "Greece",
                            Location = "Thessalonikis",
                            PostCode = (short)15354,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressNumber = (short)12,
                            Comments = "Our Second Warehouse",
                            Country = "Greece",
                            Location = "Attikis",
                            PostCode = (short)15344,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 34,
                            AddressNumber = (short)52,
                            Comments = "Our Third Warehouse",
                            Country = "Island",
                            Location = "Islandias",
                            PostCode = (short)11231,
                            WarehouseId = 3
                        },
                        new
                        {
                            Id = 35,
                            AddressNumber = (short)69,
                            Comments = "Our Fourth Warehouse",
                            Country = "Holland",
                            Location = "Hollandias",
                            PostCode = (short)11321,
                            WarehouseId = 4
                        },
                        new
                        {
                            Id = 3,
                            AddressNumber = (short)9,
                            Comments = "Supplier 1",
                            Country = "Greece",
                            Location = "Hpeirou",
                            PostCode = (short)15232,
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 4,
                            AddressNumber = (short)45,
                            Comments = "Supplier 2",
                            Country = "Greece",
                            Location = "Manis",
                            PostCode = (short)15342,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 5,
                            AddressNumber = (short)122,
                            Comments = "Supplier 3",
                            Country = "Greece",
                            Location = "Plapouta",
                            PostCode = (short)15345,
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 6,
                            AddressNumber = (short)12,
                            Comments = "Supplier 4",
                            Country = "Greece",
                            Location = "Manola",
                            PostCode = (short)15346,
                            SupplierId = 4
                        },
                        new
                        {
                            Id = 7,
                            AddressNumber = (short)180,
                            Comments = "Supplier 5",
                            Country = "Greece",
                            Location = "Parmeniona",
                            PostCode = (short)15348,
                            SupplierId = 5
                        },
                        new
                        {
                            Id = 8,
                            AddressNumber = (short)109,
                            Comments = "Supplier 6",
                            Country = "Greece",
                            Location = "Kokkinou",
                            PostCode = (short)15347,
                            SupplierId = 6
                        },
                        new
                        {
                            Id = 9,
                            AddressNumber = (short)17,
                            Comments = "Supplier 7",
                            Country = "Greece",
                            Location = "Dromena",
                            PostCode = (short)15349,
                            SupplierId = 7
                        },
                        new
                        {
                            Id = 46,
                            AddressNumber = (short)52,
                            Comments = "Supplier 8",
                            Country = "Greece",
                            Location = "Krouskaki",
                            PostCode = (short)15322,
                            SupplierId = 8
                        },
                        new
                        {
                            Id = 47,
                            AddressNumber = (short)28,
                            Comments = "Supplier 9",
                            Country = "Greece",
                            Location = "Pierrou",
                            PostCode = (short)15451,
                            SupplierId = 9
                        },
                        new
                        {
                            Id = 48,
                            AddressNumber = (short)68,
                            Comments = "Supplier 10",
                            Country = "Greece",
                            Location = "Samou",
                            PostCode = (short)15422,
                            SupplierId = 10
                        },
                        new
                        {
                            Id = 49,
                            AddressNumber = (short)69,
                            Comments = "Supplier 11",
                            Country = "Greece",
                            Location = "Georgakopoulou",
                            PostCode = (short)15422,
                            SupplierId = 11
                        },
                        new
                        {
                            Id = 50,
                            AddressNumber = (short)71,
                            Comments = "Supplier 11",
                            Country = "Greece",
                            Location = "Plitsiou",
                            PostCode = (short)15322,
                            SupplierId = 12
                        },
                        new
                        {
                            Id = 51,
                            AddressNumber = (short)71,
                            Comments = "Supplier 11",
                            Country = "Greece",
                            Location = "Mpampakou",
                            PostCode = (short)11422,
                            SupplierId = 13
                        },
                        new
                        {
                            Id = 52,
                            AddressNumber = (short)71,
                            Comments = "Supplier 11",
                            Country = "Greece",
                            Location = "Mpampakou",
                            PostCode = (short)12422,
                            SupplierId = 14
                        },
                        new
                        {
                            Id = 53,
                            AddressNumber = (short)33,
                            Comments = "Supplier 11",
                            Country = "Greece",
                            Location = "Naki",
                            PostCode = (short)12422,
                            SupplierId = 15
                        },
                        new
                        {
                            Id = 10,
                            AddressNumber = (short)19,
                            Comments = "Employee 1",
                            Country = "Greece",
                            EmployeeId = 1,
                            Location = "Dromou",
                            PostCode = (short)15350
                        },
                        new
                        {
                            Id = 11,
                            AddressNumber = (short)2,
                            Comments = "Employee 2",
                            Country = "Greece",
                            EmployeeId = 2,
                            Location = "Idioumenaki",
                            PostCode = (short)15351
                        },
                        new
                        {
                            Id = 12,
                            AddressNumber = (short)5,
                            Comments = "Employee 3",
                            Country = "Greece",
                            EmployeeId = 3,
                            Location = "Kalama",
                            PostCode = (short)15352
                        },
                        new
                        {
                            Id = 13,
                            AddressNumber = (short)78,
                            Comments = "Employee 4",
                            Country = "Greece",
                            EmployeeId = 4,
                            Location = "Dagkoto",
                            PostCode = (short)15353
                        },
                        new
                        {
                            Id = 14,
                            AddressNumber = (short)98,
                            Comments = "Employee 5",
                            Country = "Greece",
                            EmployeeId = 5,
                            Location = "Karpeta",
                            PostCode = (short)15354
                        },
                        new
                        {
                            Id = 15,
                            AddressNumber = (short)20,
                            Comments = "Employee 6",
                            Country = "Greece",
                            EmployeeId = 6,
                            Location = "Kaoutsa",
                            PostCode = (short)15355
                        },
                        new
                        {
                            Id = 16,
                            AddressNumber = (short)76,
                            Comments = "Employee 7",
                            Country = "Greece",
                            EmployeeId = 7,
                            Location = "Gkariza",
                            PostCode = (short)15356
                        },
                        new
                        {
                            Id = 17,
                            AddressNumber = (short)46,
                            Comments = "Employee 8",
                            Country = "Greece",
                            EmployeeId = 8,
                            Location = "Imalakou",
                            PostCode = (short)15357
                        },
                        new
                        {
                            Id = 18,
                            AddressNumber = (short)3,
                            Comments = "Employee 9",
                            Country = "Greece",
                            EmployeeId = 9,
                            Location = "Papputsi",
                            PostCode = (short)15358
                        },
                        new
                        {
                            Id = 19,
                            AddressNumber = (short)8,
                            Comments = "Employee 10",
                            Country = "Greece",
                            EmployeeId = 10,
                            Location = "Fterou",
                            PostCode = (short)15359
                        },
                        new
                        {
                            Id = 20,
                            AddressNumber = (short)6,
                            Comments = "Employee 11",
                            Country = "Greece",
                            EmployeeId = 11,
                            Location = "Diakou",
                            PostCode = (short)15360
                        },
                        new
                        {
                            Id = 21,
                            AddressNumber = (short)9,
                            Comments = "Employee 12",
                            Country = "Greece",
                            EmployeeId = 12,
                            Location = "Pliktrou",
                            PostCode = (short)15361
                        },
                        new
                        {
                            Id = 22,
                            AddressNumber = (short)84,
                            Comments = "Employee 13",
                            Country = "Greece",
                            EmployeeId = 13,
                            Location = "Karra",
                            PostCode = (short)15362
                        },
                        new
                        {
                            Id = 23,
                            AddressNumber = (short)63,
                            Comments = "Employee 14",
                            Country = "Greece",
                            EmployeeId = 14,
                            Location = "Kiramenaiou",
                            PostCode = (short)15363
                        },
                        new
                        {
                            Id = 24,
                            AddressNumber = (short)34,
                            Comments = "Employee 15",
                            Country = "Greece",
                            EmployeeId = 15,
                            Location = "Trixia",
                            PostCode = (short)15364
                        },
                        new
                        {
                            Id = 36,
                            AddressNumber = (short)34,
                            Comments = "Employee 16",
                            Country = "Greece",
                            EmployeeId = 16,
                            Location = "Kalamakiou",
                            PostCode = (short)15364
                        },
                        new
                        {
                            Id = 37,
                            AddressNumber = (short)52,
                            Comments = "Employee 17",
                            Country = "Greece",
                            EmployeeId = 17,
                            Location = "Pasalimani",
                            PostCode = (short)15322
                        },
                        new
                        {
                            Id = 38,
                            AddressNumber = (short)42,
                            Comments = "Employee 18",
                            Country = "Greece",
                            EmployeeId = 18,
                            Location = "Apiranthou",
                            PostCode = (short)15442
                        },
                        new
                        {
                            Id = 39,
                            AddressNumber = (short)47,
                            Comments = "Employee 19",
                            Country = "Greece",
                            EmployeeId = 19,
                            Location = "Eirinis",
                            PostCode = (short)11122
                        },
                        new
                        {
                            Id = 40,
                            AddressNumber = (short)99,
                            Comments = "Employee 20",
                            Country = "Greece",
                            EmployeeId = 20,
                            Location = "Kalamakiou",
                            PostCode = (short)13322
                        },
                        new
                        {
                            Id = 41,
                            AddressNumber = (short)76,
                            Comments = "Employee 21",
                            Country = "Greece",
                            EmployeeId = 21,
                            Location = "Alimou",
                            PostCode = (short)13762
                        },
                        new
                        {
                            Id = 42,
                            AddressNumber = (short)16,
                            Comments = "Employee 22",
                            Country = "Greece",
                            EmployeeId = 22,
                            Location = "Mpizaniou",
                            PostCode = (short)13762
                        },
                        new
                        {
                            Id = 43,
                            AddressNumber = (short)169,
                            Comments = "Employee 23",
                            Country = "Greece",
                            EmployeeId = 23,
                            Location = "Ionias",
                            PostCode = (short)17456
                        },
                        new
                        {
                            Id = 44,
                            AddressNumber = (short)171,
                            Comments = "Employee 24",
                            Country = "Greece",
                            EmployeeId = 24,
                            Location = "Ionias",
                            PostCode = (short)17456
                        },
                        new
                        {
                            Id = 45,
                            AddressNumber = (short)23,
                            Comments = "Employee 25",
                            Country = "Greece",
                            EmployeeId = 25,
                            Location = "Naupliou",
                            PostCode = (short)17456
                        },
                        new
                        {
                            Id = 54,
                            AddressNumber = (short)23,
                            Comments = "Customer 1",
                            Country = "Greece",
                            CustomerId = 1,
                            Location = "Xaralampou",
                            PostCode = (short)17456
                        },
                        new
                        {
                            Id = 55,
                            AddressNumber = (short)33,
                            Comments = "Customer 2",
                            Country = "Greece",
                            CustomerId = 2,
                            Location = "Kolokotroni",
                            PostCode = (short)17482
                        },
                        new
                        {
                            Id = 56,
                            AddressNumber = (short)22,
                            Comments = "Customer 3",
                            Country = "Greece",
                            CustomerId = 3,
                            Location = "Pitsou",
                            PostCode = (short)13382
                        },
                        new
                        {
                            Id = 57,
                            AddressNumber = (short)88,
                            Comments = "Customer 4",
                            Country = "Greece",
                            CustomerId = 4,
                            Location = "Pikatsou",
                            PostCode = (short)13382
                        },
                        new
                        {
                            Id = 58,
                            AddressNumber = (short)132,
                            Comments = "Customer 5",
                            Country = "Greece",
                            CustomerId = 5,
                            Location = "Raitsou",
                            PostCode = (short)13382
                        },
                        new
                        {
                            Id = 59,
                            AddressNumber = (short)52,
                            Comments = "Customer 6",
                            Country = "Greece",
                            CustomerId = 6,
                            Location = "Paprikas",
                            PostCode = (short)13772
                        },
                        new
                        {
                            Id = 60,
                            AddressNumber = (short)57,
                            Comments = "Customer 7",
                            Country = "Greece",
                            CustomerId = 7,
                            Location = "Maintanou",
                            PostCode = (short)13772
                        },
                        new
                        {
                            Id = 61,
                            AddressNumber = (short)82,
                            Comments = "Customer 8",
                            Country = "Greece",
                            CustomerId = 8,
                            Location = "Anithou",
                            PostCode = (short)13992
                        },
                        new
                        {
                            Id = 62,
                            AddressNumber = (short)82,
                            Comments = "Customer 9",
                            Country = "Greece",
                            CustomerId = 9,
                            Location = "Piperiou",
                            PostCode = (short)22992
                        },
                        new
                        {
                            Id = 63,
                            AddressNumber = (short)68,
                            Comments = "Customer 10",
                            Country = "Greece",
                            CustomerId = 10,
                            Location = "Alatiou",
                            PostCode = (short)22992
                        },
                        new
                        {
                            Id = 64,
                            AddressNumber = (short)71,
                            Comments = "Customer 11",
                            Country = "Greece",
                            CustomerId = 11,
                            Location = "Valsamikou",
                            PostCode = (short)22992
                        },
                        new
                        {
                            Id = 65,
                            AddressNumber = (short)71,
                            Comments = "Customer 12",
                            Country = "Greece",
                            CustomerId = 12,
                            Location = "Ladiou",
                            PostCode = (short)22132
                        },
                        new
                        {
                            Id = 66,
                            AddressNumber = (short)71,
                            CandidateId = 1,
                            Comments = "Candidate 1",
                            Country = "Greece",
                            Location = "Kalymnou",
                            PostCode = (short)22992
                        },
                        new
                        {
                            Id = 67,
                            AddressNumber = (short)52,
                            CandidateId = 2,
                            Comments = "Candidate 2",
                            Country = "Greece",
                            Location = "Rodou",
                            PostCode = (short)22980
                        },
                        new
                        {
                            Id = 68,
                            AddressNumber = (short)45,
                            CandidateId = 3,
                            Comments = "Candidate 3",
                            Country = "Greece",
                            Location = "Mykonou",
                            PostCode = (short)21380
                        },
                        new
                        {
                            Id = 69,
                            AddressNumber = (short)33,
                            CandidateId = 4,
                            Comments = "Candidate 4",
                            Country = "Greece",
                            Location = "Parou",
                            PostCode = (short)21900
                        },
                        new
                        {
                            Id = 70,
                            AddressNumber = (short)5,
                            CandidateId = 5,
                            Comments = "Candidate 5",
                            Country = "Greece",
                            Location = "Leukadas",
                            PostCode = (short)21032
                        },
                        new
                        {
                            Id = 71,
                            AddressNumber = (short)56,
                            CandidateId = 6,
                            Comments = "Candidate 6",
                            Country = "Greece",
                            Location = "Porou",
                            PostCode = (short)21011
                        },
                        new
                        {
                            Id = 72,
                            AddressNumber = (short)90,
                            CandidateId = 7,
                            Comments = "Candidate 7",
                            Country = "Greece",
                            Location = "Kritis",
                            PostCode = (short)21055
                        },
                        new
                        {
                            Id = 73,
                            AddressNumber = (short)83,
                            CandidateId = 8,
                            Comments = "Candidate 8",
                            Country = "Greece",
                            Location = "Kefalonias",
                            PostCode = (short)21012
                        },
                        new
                        {
                            Id = 74,
                            AddressNumber = (short)42,
                            CandidateId = 9,
                            Comments = "Candidate 9",
                            Country = "Greece",
                            Location = "Patmou",
                            PostCode = (short)21662
                        },
                        new
                        {
                            Id = 75,
                            AddressNumber = (short)42,
                            CandidateId = 10,
                            Comments = "Candidate 10",
                            Country = "Greece",
                            Location = "Lerou",
                            PostCode = (short)21612
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("CV")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsBlacklisted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Kennard",
                            IsBlacklisted = false,
                            LastName = "Ramsey"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(2000, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Dominic",
                            IsBlacklisted = false,
                            LastName = "Greenwood"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(2001, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Benjamin",
                            IsBlacklisted = false,
                            LastName = "Hunt"
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(2003, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Victor",
                            IsBlacklisted = false,
                            LastName = "Lambert"
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(1997, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ferdinand",
                            IsBlacklisted = false,
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 6,
                            DateOfBirth = new DateTime(1981, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Melinda",
                            IsBlacklisted = false,
                            LastName = "Gross"
                        },
                        new
                        {
                            Id = 7,
                            DateOfBirth = new DateTime(1987, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Laura",
                            IsBlacklisted = false,
                            LastName = "Parham"
                        },
                        new
                        {
                            Id = 8,
                            DateOfBirth = new DateTime(2002, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Lucy",
                            IsBlacklisted = false,
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 9,
                            DateOfBirth = new DateTime(2002, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Harper",
                            IsBlacklisted = false,
                            LastName = "Fernandez"
                        },
                        new
                        {
                            Id = 10,
                            DateOfBirth = new DateTime(2000, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Georgia",
                            IsBlacklisted = false,
                            LastName = "Lawson"
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.CandidatePosition", b =>
                {
                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<byte>("RecruitStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("CandidateId", "PositionId");

                    b.HasIndex("PositionId");

                    b.HasIndex("CandidateId", "PositionId", "RecruitStatus")
                        .IsUnique();

                    b.ToTable("CandidatePositions");

                    b.HasCheckConstraint("cc_CandidatePosition_RecruitStatus", "RecruitStatus IN (1,2,3,4,5,6,7)");

                    b.HasData(
                        new
                        {
                            CandidateId = 1,
                            PositionId = 1,
                            RecruitStatus = (byte)1
                        },
                        new
                        {
                            CandidateId = 2,
                            PositionId = 2,
                            RecruitStatus = (byte)1
                        },
                        new
                        {
                            CandidateId = 3,
                            PositionId = 3,
                            RecruitStatus = (byte)2
                        },
                        new
                        {
                            CandidateId = 4,
                            PositionId = 4,
                            RecruitStatus = (byte)2
                        },
                        new
                        {
                            CandidateId = 5,
                            PositionId = 5,
                            RecruitStatus = (byte)3
                        },
                        new
                        {
                            CandidateId = 6,
                            PositionId = 6,
                            RecruitStatus = (byte)3
                        },
                        new
                        {
                            CandidateId = 7,
                            PositionId = 7,
                            RecruitStatus = (byte)4
                        },
                        new
                        {
                            CandidateId = 8,
                            PositionId = 8,
                            RecruitStatus = (byte)4
                        },
                        new
                        {
                            CandidateId = 9,
                            PositionId = 9,
                            RecruitStatus = (byte)5
                        },
                        new
                        {
                            CandidateId = 10,
                            PositionId = 10,
                            RecruitStatus = (byte)7
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Makis",
                            LastName = "Metamorfwsi"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Amir",
                            LastName = "Rao"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Gavin",
                            LastName = "Simon"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Darren",
                            LastName = "Korb"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Jen",
                            LastName = "Zee"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Greg",
                            LastName = "Kasavin"
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "Andrew",
                            LastName = "Wang"
                        },
                        new
                        {
                            Id = 8,
                            FirstName = "Logan",
                            LastName = "Cunningham"
                        },
                        new
                        {
                            Id = 9,
                            FirstName = "Josh",
                            LastName = "Barnett"
                        },
                        new
                        {
                            Id = 10,
                            FirstName = "John-Paul",
                            LastName = "Gabler"
                        },
                        new
                        {
                            Id = 11,
                            FirstName = "Dexter",
                            LastName = "Friedman"
                        },
                        new
                        {
                            Id = 12,
                            FirstName = "Ashley",
                            LastName = "Barrett"
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Procurement"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sales"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Eshop"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Warehouse"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Accounting"
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2021, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2021, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2021, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2022, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 4
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2021, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 5
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateTime(2021, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 6
                        },
                        new
                        {
                            Id = 7,
                            EndDate = new DateTime(2021, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 7
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.DiscountLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("DiscountLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1000.0,
                            DiscountId = 1,
                            DiscountPercentage = 0.02
                        },
                        new
                        {
                            Id = 2,
                            Amount = 3000.0,
                            DiscountId = 1,
                            DiscountPercentage = 0.050000000000000003
                        },
                        new
                        {
                            Id = 3,
                            Amount = 3000.0,
                            DiscountId = 2,
                            DiscountPercentage = 0.34999999999999998
                        },
                        new
                        {
                            Id = 4,
                            Amount = 7000.0,
                            DiscountId = 2,
                            DiscountPercentage = 0.059999999999999998
                        },
                        new
                        {
                            Id = 5,
                            Amount = 1500.0,
                            DiscountId = 3,
                            DiscountPercentage = 0.02
                        },
                        new
                        {
                            Id = 6,
                            Amount = 3000.0,
                            DiscountId = 3,
                            DiscountPercentage = 0.050000000000000003
                        },
                        new
                        {
                            Id = 7,
                            Amount = 2000.0,
                            DiscountId = 4,
                            DiscountPercentage = 0.050000000000000003
                        },
                        new
                        {
                            Id = 8,
                            Amount = 3000.0,
                            DiscountId = 4,
                            DiscountPercentage = 0.059999999999999998
                        },
                        new
                        {
                            Id = 9,
                            Amount = 12000.0,
                            DiscountId = 5,
                            DiscountPercentage = 0.035000000000000003
                        },
                        new
                        {
                            Id = 10,
                            Amount = 20000.0,
                            DiscountId = 5,
                            DiscountPercentage = 0.070000000000000007
                        },
                        new
                        {
                            Id = 11,
                            Amount = 1000.0,
                            DiscountId = 6,
                            DiscountPercentage = 0.02
                        },
                        new
                        {
                            Id = 12,
                            Amount = 5000.0,
                            DiscountId = 6,
                            DiscountPercentage = 0.080000000000000002
                        },
                        new
                        {
                            Id = 13,
                            Amount = 4000.0,
                            DiscountId = 7,
                            DiscountPercentage = 0.050000000000000003
                        },
                        new
                        {
                            Id = 14,
                            Amount = 10000.0,
                            DiscountId = 7,
                            DiscountPercentage = 0.089999999999999997
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("MailType")
                        .HasColumnType("tinyint");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Mail")
                        .IsUnique()
                        .HasFilter("[Mail] IS NOT NULL");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Emails");

                    b.HasCheckConstraint("cc_Email_MailType", "MailType IN (1,2)");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = 1,
                            Mail = "ijustwanttosleep@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 2,
                            EmployeeId = 2,
                            Mail = "endmysuffering@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 3,
                            EmployeeId = 3,
                            Mail = "existenceispain@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 4,
                            EmployeeId = 4,
                            Mail = "livelovelaugh@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 5,
                            EmployeeId = 5,
                            Mail = "hellodarkness@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 6,
                            EmployeeId = 6,
                            Mail = "myoldfriend@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 7,
                            EmployeeId = 7,
                            Mail = "ihavecometo@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 8,
                            EmployeeId = 8,
                            Mail = "talktoyouagain@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 9,
                            EmployeeId = 9,
                            Mail = "whenpigsfly@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 10,
                            EmployeeId = 10,
                            Mail = "twoshotsoftequila@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 11,
                            EmployeeId = 11,
                            Mail = "longislandicetea@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 12,
                            EmployeeId = 12,
                            Mail = "mylovelylittlelumps@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 13,
                            EmployeeId = 13,
                            Mail = "imabeebeebee@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 14,
                            EmployeeId = 14,
                            Mail = "koralimikrokoralo@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 15,
                            EmployeeId = 15,
                            Mail = "kaimikrokoralaki@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 16,
                            EmployeeId = 16,
                            Mail = "intheflame@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 17,
                            EmployeeId = 17,
                            Mail = "downriver@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 18,
                            EmployeeId = 18,
                            Mail = "downsideballad@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 19,
                            EmployeeId = 19,
                            Mail = "pathtoglory@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 20,
                            EmployeeId = 20,
                            Mail = "lifesentence@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 21,
                            EmployeeId = 21,
                            Mail = "survivingexile@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 22,
                            EmployeeId = 22,
                            Mail = "forbiddenknowledge@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 23,
                            EmployeeId = 23,
                            Mail = "moontouched@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 24,
                            EmployeeId = 24,
                            Mail = "throughthevalley@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 25,
                            EmployeeId = 25,
                            Mail = "nighthowlers@gmail.com",
                            MailType = (byte)2
                        },
                        new
                        {
                            Id = 26,
                            Mail = "theherald@gmail.com",
                            MailType = (byte)2,
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 27,
                            Mail = "mourningsong@gmail.com",
                            MailType = (byte)2,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 28,
                            Mail = "eightscribes@gmail.com",
                            MailType = (byte)2,
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 29,
                            Mail = "glorioustradition@gmail.com",
                            MailType = (byte)2,
                            SupplierId = 4
                        },
                        new
                        {
                            Id = 30,
                            Mail = "flutterfly@gmail.com",
                            MailType = (byte)2,
                            SupplierId = 5
                        },
                        new
                        {
                            Id = 31,
                            Mail = "trashpack@gmail.com",
                            MailType = (byte)2,
                            SupplierId = 6
                        },
                        new
                        {
                            Id = 32,
                            Mail = "astepcloser@gmail.com",
                            MailType = (byte)2,
                            SupplierId = 7
                        },
                        new
                        {
                            Id = 33,
                            Mail = "dirtydeal@gmail.com",
                            MailType = (byte)2,
                            SupplierId = 8
                        },
                        new
                        {
                            Id = 34,
                            Mail = "sinkingfeeling@gmail.com",
                            MailType = (byte)2,
                            SupplierId = 9
                        },
                        new
                        {
                            Id = 35,
                            Mail = "dreaddesign@gmail.com",
                            MailType = (byte)2,
                            SupplierId = 10
                        },
                        new
                        {
                            Id = 36,
                            Mail = "snakesoul@gmail.com",
                            MailType = (byte)2,
                            SupplierId = 11
                        },
                        new
                        {
                            Id = 37,
                            Mail = "strangevoyage@gmail.com",
                            MailType = (byte)2,
                            SupplierId = 12
                        },
                        new
                        {
                            Id = 38,
                            Mail = "questforhonor@gmail.com",
                            MailType = (byte)2,
                            SupplierId = 13
                        },
                        new
                        {
                            Id = 39,
                            Mail = "knightofthesea@gmail.com",
                            MailType = (byte)2,
                            SupplierId = 14
                        },
                        new
                        {
                            Id = 40,
                            Mail = "vagrantsong@gmail.com",
                            MailType = (byte)2,
                            SupplierId = 15
                        },
                        new
                        {
                            Id = 41,
                            Mail = "warehouseone@gmail.com",
                            MailType = (byte)2,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 42,
                            Mail = "warehousetwo@gmail.com",
                            MailType = (byte)2,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 43,
                            Mail = "warehousethree@gmail.com",
                            MailType = (byte)2,
                            WarehouseId = 3
                        },
                        new
                        {
                            Id = 44,
                            Mail = "warehousefour@gmail.com",
                            MailType = (byte)2,
                            WarehouseId = 4
                        },
                        new
                        {
                            Id = 45,
                            CustomerId = 1,
                            Mail = "noescape@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 46,
                            CustomerId = 2,
                            Mail = "houseofhades@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 47,
                            CustomerId = 3,
                            Mail = "outoftartarus@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 48,
                            CustomerId = 4,
                            Mail = "wretchedshades@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 49,
                            CustomerId = 5,
                            Mail = "lamentoforpheus@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 50,
                            CustomerId = 6,
                            Mail = "thepainfulway@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 51,
                            CustomerId = 7,
                            Mail = "fromolympous@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 52,
                            CustomerId = 8,
                            Mail = "throughasphodel@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 53,
                            CustomerId = 9,
                            Mail = "goodridance@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 54,
                            CustomerId = 10,
                            Mail = "finalexpense@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 55,
                            CustomerId = 11,
                            Mail = "mouthofstyx@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 56,
                            CustomerId = 12,
                            Mail = "primorgialchaos@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 57,
                            CandidateId = 1,
                            Mail = "oldfriends@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 58,
                            CandidateId = 2,
                            Mail = "stainedglass@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 59,
                            CandidateId = 3,
                            Mail = "forecast@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 60,
                            CandidateId = 4,
                            Mail = "waterwall@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 61,
                            CandidateId = 5,
                            Mail = "thespine@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 62,
                            CandidateId = 6,
                            Mail = "coasting@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 63,
                            CandidateId = 7,
                            Mail = "vanishingpoint@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 64,
                            CandidateId = 7,
                            Mail = "traces@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 65,
                            CandidateId = 8,
                            Mail = "cutapart@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 66,
                            CandidateId = 9,
                            Mail = "incircles@gmail.com",
                            MailType = (byte)1
                        },
                        new
                        {
                            Id = 67,
                            CandidateId = 10,
                            Mail = "paperboats@gmail.com",
                            MailType = (byte)1
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHeadOfDepartment")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkExperience")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1980, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            FirstName = "George",
                            HireDate = new DateTime(2020, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = false,
                            LastName = "Chromosone",
                            UserId = "e1802e5e-a448-4c4e-841c-40b8a0de9dbf",
                            WorkExperience = "Something good I guess"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1975, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            FirstName = "Tyler",
                            HireDate = new DateTime(2019, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = true,
                            LastName = "Durden",
                            UserId = "f6afa472-95ed-4220-bc3a-0c212afa15db",
                            WorkExperience = "So cool"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1980, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            FirstName = "Robert",
                            HireDate = new DateTime(2019, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = false,
                            LastName = "Paulsen",
                            UserId = "aeab492c-eb08-4a29-b6d9-0b936a292116",
                            WorkExperience = "His Name was Robert Paulsen"
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(1990, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            FirstName = "Richard",
                            HireDate = new DateTime(2019, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = false,
                            LastName = "Chester",
                            UserId = "cd97911d-e70c-4a33-8365-ca3c69189215",
                            WorkExperience = "Wow so inadequeate"
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(1980, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            FirstName = "Thomas",
                            HireDate = new DateTime(2019, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = false,
                            LastName = "Inferino",
                            UserId = "9e7b14d3-81eb-456a-a755-33d25dc1fd98",
                            WorkExperience = "The best experience"
                        },
                        new
                        {
                            Id = 6,
                            DateOfBirth = new DateTime(1979, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            FirstName = "Lee",
                            HireDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = true,
                            LastName = "Gooper",
                            UserId = "d5e7fbf5-2be9-4e35-adf6-d6df34b0d4dd",
                            WorkExperience = "The best of the best"
                        },
                        new
                        {
                            Id = 7,
                            DateOfBirth = new DateTime(1980, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            FirstName = "Marla",
                            HireDate = new DateTime(2020, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = false,
                            LastName = "Singer",
                            UserId = "01cac9a3-aac4-459c-b879-04af9d1f07ee",
                            WorkExperience = "The bestest"
                        },
                        new
                        {
                            Id = 8,
                            DateOfBirth = new DateTime(1970, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            FirstName = "Charlie",
                            HireDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = false,
                            LastName = "Dell",
                            UserId = "499a186a-847a-44bb-ac77-c8e07cdb1251",
                            WorkExperience = "The best experience ever"
                        },
                        new
                        {
                            Id = 9,
                            DateOfBirth = new DateTime(1980, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            FirstName = "Rob",
                            HireDate = new DateTime(2020, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = false,
                            LastName = "Lanza",
                            UserId = "907f51e7-8c3c-431a-8796-0e79f6a36630",
                            WorkExperience = "What a wonderfull experience"
                        },
                        new
                        {
                            Id = 10,
                            DateOfBirth = new DateTime(1985, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            FirstName = "Holly",
                            HireDate = new DateTime(2020, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = false,
                            LastName = "McCallany",
                            UserId = "4c81c4fe-ece4-43fb-af0d-1b7077eeeb04",
                            WorkExperience = "Super douper experience"
                        },
                        new
                        {
                            Id = 11,
                            DateOfBirth = new DateTime(1976, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            FirstName = "Lucy",
                            HireDate = new DateTime(2019, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = true,
                            LastName = "Bissonnette",
                            UserId = "a620855c-c81a-4720-8c5f-cf724e1d0951",
                            WorkExperience = "The best of all"
                        },
                        new
                        {
                            Id = 12,
                            DateOfBirth = new DateTime(1987, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4,
                            FirstName = "Ella",
                            HireDate = new DateTime(2021, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = false,
                            LastName = "Bailey",
                            UserId = "60a94fc9-9ee5-4923-904c-6622c42d9e99",
                            WorkExperience = "I wanna be the very best"
                        },
                        new
                        {
                            Id = 13,
                            DateOfBirth = new DateTime(1989, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4,
                            FirstName = "Jare",
                            HireDate = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = false,
                            LastName = "Vleto",
                            UserId = "40e78c1b-3314-4ad8-9a13-d3f5ec7965bf",
                            WorkExperience = "Like no one ever was"
                        },
                        new
                        {
                            Id = 14,
                            DateOfBirth = new DateTime(1989, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4,
                            FirstName = "Anais",
                            HireDate = new DateTime(2019, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = false,
                            LastName = "Winston",
                            UserId = "64fe3c64-6cf0-4de3-8e53-917825b2528e",
                            WorkExperience = "The smartest of all"
                        },
                        new
                        {
                            Id = 15,
                            DateOfBirth = new DateTime(1978, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4,
                            FirstName = "Matt",
                            HireDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = true,
                            LastName = "Kim",
                            UserId = "9cdad891-9814-4b2f-b769-74b9e2a8e836",
                            WorkExperience = "The strongest of all"
                        },
                        new
                        {
                            Id = 16,
                            DateOfBirth = new DateTime(1987, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            FirstName = "Lucy",
                            HireDate = new DateTime(2019, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = true,
                            LastName = "Loo",
                            UserId = "c9342ed5-bcf6-47d3-95f9-84a95b7f19f3",
                            WorkExperience = "To catch the knowledge is my cause"
                        },
                        new
                        {
                            Id = 17,
                            DateOfBirth = new DateTime(1987, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            FirstName = "Antony",
                            HireDate = new DateTime(2020, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = false,
                            LastName = "Somersby",
                            UserId = "d066e575-39cd-4ed5-b9e2-bfaeb08999e1",
                            WorkExperience = "The trainig is my cause"
                        },
                        new
                        {
                            Id = 18,
                            DateOfBirth = new DateTime(1988, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            FirstName = "Mary",
                            HireDate = new DateTime(2019, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = false,
                            LastName = "Watermelon",
                            UserId = "9048a711-c953-47de-8319-9f57cb2347ba",
                            WorkExperience = "Ultra experienced"
                        },
                        new
                        {
                            Id = 19,
                            DateOfBirth = new DateTime(1978, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4,
                            FirstName = "Nick",
                            HireDate = new DateTime(2020, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = true,
                            LastName = "Meow",
                            UserId = "a8f92bc6-3d6b-4315-8101-acea88fe480a",
                            WorkExperience = "Super experienced"
                        },
                        new
                        {
                            Id = 20,
                            DateOfBirth = new DateTime(1979, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            FirstName = "Peter",
                            HireDate = new DateTime(2019, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = false,
                            LastName = "Flavoured",
                            UserId = "fd5aeaed-9088-457d-b91d-8c9074ef6c14",
                            WorkExperience = "The one that never bored"
                        },
                        new
                        {
                            Id = 21,
                            DateOfBirth = new DateTime(1979, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            FirstName = "Paris",
                            HireDate = new DateTime(2019, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = false,
                            LastName = "OverIce",
                            UserId = "ed6ea617-258e-41e9-8c1c-5c4823c5e87f",
                            WorkExperience = "Something really nice"
                        },
                        new
                        {
                            Id = 22,
                            DateOfBirth = new DateTime(1980, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            FirstName = "Leon",
                            HireDate = new DateTime(2019, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = true,
                            LastName = "Pisher",
                            UserId = "5b60d6d4-5351-4f6a-9e0e-8acaa79daf94f",
                            WorkExperience = "The best of the best"
                        },
                        new
                        {
                            Id = 23,
                            DateOfBirth = new DateTime(1980, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            FirstName = "Liam",
                            HireDate = new DateTime(2019, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = false,
                            LastName = "Cider",
                            UserId = "2a023c9a-1676-4bf2-8ee8-a98b11e961d0",
                            WorkExperience = "Most experienced of all"
                        },
                        new
                        {
                            Id = 24,
                            DateOfBirth = new DateTime(1982, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4,
                            FirstName = "Zan",
                            HireDate = new DateTime(2018, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = false,
                            LastName = "Wow",
                            UserId = "437c2a07-2931-43de-9dfb-4d415247c508",
                            WorkExperience = "The power thats inside"
                        },
                        new
                        {
                            Id = 25,
                            DateOfBirth = new DateTime(1982, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            FirstName = "Anna",
                            HireDate = new DateTime(2018, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsHeadOfDepartment = true,
                            LastName = "Banana",
                            UserId = "c4c6f346-65b7-4dda-97ce-4422eb58013a",
                            WorkExperience = "I know it's my destiny"
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.EmployeeMeeting", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "MeetingId");

                    b.HasIndex("MeetingId");

                    b.ToTable("EmployeeMeetings");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Favorite", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfInterview")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Interviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 1,
                            DateOfInterview = new DateTime(2021, 4, 18, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            Rating = 0
                        },
                        new
                        {
                            Id = 2,
                            CandidateId = 3,
                            Comments = "Great energy",
                            DateOfInterview = new DateTime(2021, 4, 2, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            Rating = 5
                        },
                        new
                        {
                            Id = 3,
                            CandidateId = 5,
                            DateOfInterview = new DateTime(2021, 4, 22, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 5,
                            Rating = 0
                        },
                        new
                        {
                            Id = 4,
                            CandidateId = 7,
                            Comments = "Not Impressed",
                            DateOfInterview = new DateTime(2021, 3, 29, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 7,
                            Rating = 2
                        },
                        new
                        {
                            Id = 5,
                            CandidateId = 9,
                            Comments = "Mixed Feelings",
                            DateOfInterview = new DateTime(2021, 3, 27, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 9,
                            Rating = 3
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Leave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("LeaveType")
                        .HasColumnType("tinyint");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Leaves");

                    b.HasCheckConstraint("cc_Leave_Status", "Status IN (1,2,3)");

                    b.HasCheckConstraint("cc_Leave_LeaveType", "LeaveType IN (1,2,3,4,5)");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = 2,
                            LeaveType = (byte)1,
                            NumberOfDays = 2,
                            StartDate = new DateTime(2021, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 2,
                            EmployeeId = 5,
                            LeaveType = (byte)3,
                            NumberOfDays = 5,
                            StartDate = new DateTime(2021, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 3,
                            EmployeeId = 10,
                            LeaveType = (byte)1,
                            NumberOfDays = 2,
                            StartDate = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 4,
                            EmployeeId = 15,
                            LeaveType = (byte)4,
                            NumberOfDays = 2,
                            StartDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 5,
                            EmployeeId = 9,
                            LeaveType = (byte)2,
                            NumberOfDays = 1,
                            StartDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 6,
                            EmployeeId = 2,
                            LeaveType = (byte)5,
                            NumberOfDays = 1,
                            StartDate = new DateTime(2021, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 7,
                            EmployeeId = 11,
                            LeaveType = (byte)1,
                            NumberOfDays = 7,
                            StartDate = new DateTime(2021, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 8,
                            EmployeeId = 2,
                            LeaveType = (byte)3,
                            NumberOfDays = 4,
                            StartDate = new DateTime(2021, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 9,
                            EmployeeId = 19,
                            LeaveType = (byte)4,
                            NumberOfDays = 7,
                            StartDate = new DateTime(2021, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 10,
                            EmployeeId = 1,
                            LeaveType = (byte)2,
                            NumberOfDays = 1,
                            StartDate = new DateTime(2021, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 11,
                            EmployeeId = 11,
                            LeaveType = (byte)5,
                            NumberOfDays = 2,
                            StartDate = new DateTime(2021, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 12,
                            EmployeeId = 22,
                            LeaveType = (byte)1,
                            NumberOfDays = 2,
                            StartDate = new DateTime(2021, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 13,
                            EmployeeId = 20,
                            LeaveType = (byte)3,
                            NumberOfDays = 3,
                            StartDate = new DateTime(2021, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 14,
                            EmployeeId = 18,
                            LeaveType = (byte)4,
                            NumberOfDays = 4,
                            StartDate = new DateTime(2021, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 15,
                            EmployeeId = 17,
                            LeaveType = (byte)2,
                            NumberOfDays = 5,
                            StartDate = new DateTime(2021, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = (byte)1
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.LeaveHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("LeaveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeaveId");

                    b.ToTable("LeaveHistories");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReviewed")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountLevelId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("name");

                    b.Property<DateTime>("ReviewDeadline")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountLevelId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2021, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountLevelId = 1,
                            EmployeeId = 1,
                            Name = "Offer 1",
                            ReviewDeadline = new DateTime(2021, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2021, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountLevelId = 3,
                            EmployeeId = 1,
                            Name = "Offer 2",
                            ReviewDeadline = new DateTime(2021, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2021, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountLevelId = 5,
                            EmployeeId = 1,
                            Name = "Offer 3",
                            ReviewDeadline = new DateTime(2021, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2021, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountLevelId = 7,
                            EmployeeId = 1,
                            Name = "Offer 4",
                            ReviewDeadline = new DateTime(2021, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2021, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountLevelId = 9,
                            EmployeeId = 1,
                            Name = "Offer 5",
                            ReviewDeadline = new DateTime(2021, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 5
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2021, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountLevelId = 11,
                            EmployeeId = 1,
                            Name = "Offer 6",
                            ReviewDeadline = new DateTime(2021, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 6
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2021, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountLevelId = 13,
                            EmployeeId = 1,
                            Name = "Offer 7",
                            ReviewDeadline = new DateTime(2021, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 7
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateReviewed = new DateTime(2021, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountLevelId = 1,
                            EmployeeId = 3,
                            Name = "Offer 8",
                            ReviewDeadline = new DateTime(2021, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2020, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateReviewed = new DateTime(2021, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountLevelId = 3,
                            EmployeeId = 3,
                            Name = "Offer 9",
                            ReviewDeadline = new DateTime(2021, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 2
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.OfferItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RawMaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("RawMaterialId");

                    b.ToTable("OfferItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OfferId = 1,
                            Quantity = 150,
                            RawMaterialId = 1
                        },
                        new
                        {
                            Id = 2,
                            OfferId = 1,
                            Quantity = 110,
                            RawMaterialId = 3
                        },
                        new
                        {
                            Id = 3,
                            OfferId = 2,
                            Quantity = 100,
                            RawMaterialId = 2
                        },
                        new
                        {
                            Id = 4,
                            OfferId = 2,
                            Quantity = 234,
                            RawMaterialId = 6
                        },
                        new
                        {
                            Id = 5,
                            OfferId = 3,
                            Quantity = 322,
                            RawMaterialId = 1
                        },
                        new
                        {
                            Id = 6,
                            OfferId = 3,
                            Quantity = 420,
                            RawMaterialId = 3
                        },
                        new
                        {
                            Id = 7,
                            OfferId = 4,
                            Quantity = 200,
                            RawMaterialId = 1
                        },
                        new
                        {
                            Id = 8,
                            OfferId = 4,
                            Quantity = 100,
                            RawMaterialId = 4
                        },
                        new
                        {
                            Id = 9,
                            OfferId = 5,
                            Quantity = 340,
                            RawMaterialId = 1
                        },
                        new
                        {
                            Id = 10,
                            OfferId = 5,
                            Quantity = 500,
                            RawMaterialId = 2
                        },
                        new
                        {
                            Id = 11,
                            OfferId = 6,
                            Quantity = 390,
                            RawMaterialId = 1
                        },
                        new
                        {
                            Id = 12,
                            OfferId = 6,
                            Quantity = 1000,
                            RawMaterialId = 2
                        },
                        new
                        {
                            Id = 13,
                            OfferId = 6,
                            Quantity = 2000,
                            RawMaterialId = 5
                        },
                        new
                        {
                            Id = 14,
                            OfferId = 7,
                            Quantity = 2800,
                            RawMaterialId = 1
                        },
                        new
                        {
                            Id = 15,
                            OfferId = 7,
                            Quantity = 1000,
                            RawMaterialId = 5
                        },
                        new
                        {
                            Id = 16,
                            OfferId = 7,
                            Quantity = 100,
                            RawMaterialId = 6
                        },
                        new
                        {
                            Id = 17,
                            OfferId = 8,
                            Quantity = 100,
                            RawMaterialId = 1
                        },
                        new
                        {
                            Id = 18,
                            OfferId = 9,
                            Quantity = 200,
                            RawMaterialId = 6
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderFulfilled")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<byte>("PaymentType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasCheckConstraint("cc_Order_PaymentType", "PaymentType IN (1,2)");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            OrderPlaced = new DateTime(2021, 4, 2, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            PaymentType = (byte)2
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 3,
                            OrderPlaced = new DateTime(2021, 3, 18, 14, 37, 0, 0, DateTimeKind.Unspecified),
                            PaymentType = (byte)1
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 5,
                            OrderFulfilled = new DateTime(2021, 4, 10, 12, 27, 0, 0, DateTimeKind.Unspecified),
                            OrderPlaced = new DateTime(2021, 4, 2, 5, 37, 0, 0, DateTimeKind.Unspecified),
                            PaymentType = (byte)1
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 7,
                            OrderFulfilled = new DateTime(2021, 4, 2, 12, 56, 0, 0, DateTimeKind.Unspecified),
                            OrderPlaced = new DateTime(2021, 3, 27, 19, 45, 0, 0, DateTimeKind.Unspecified),
                            PaymentType = (byte)2
                        },
                        new
                        {
                            Id = 5,
                            CustomerId = 9,
                            OrderFulfilled = new DateTime(2021, 4, 11, 16, 5, 0, 0, DateTimeKind.Unspecified),
                            OrderPlaced = new DateTime(2021, 4, 7, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            PaymentType = (byte)2
                        },
                        new
                        {
                            Id = 6,
                            CustomerId = 11,
                            OrderPlaced = new DateTime(2021, 4, 10, 23, 45, 0, 0, DateTimeKind.Unspecified),
                            PaymentType = (byte)1
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("PhoneType")
                        .HasColumnType("tinyint");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Phones");

                    b.HasCheckConstraint("cc_Phone_PhoneType", "PhoneType IN (1,2)");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = 1,
                            Number = "2109923145",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 2,
                            EmployeeId = 2,
                            Number = "2109924145",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 3,
                            EmployeeId = 3,
                            Number = "2109924167",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 4,
                            EmployeeId = 4,
                            Number = "2109854167",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 5,
                            EmployeeId = 5,
                            Number = "2109852267",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 6,
                            EmployeeId = 6,
                            Number = "2109854467",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 7,
                            EmployeeId = 7,
                            Number = "2109854537",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 8,
                            EmployeeId = 8,
                            Number = "2109654537",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 9,
                            EmployeeId = 9,
                            Number = "2109948737",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 10,
                            EmployeeId = 10,
                            Number = "2109754537",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 11,
                            EmployeeId = 11,
                            Number = "2109763537",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 12,
                            EmployeeId = 12,
                            Number = "2109384537",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 13,
                            EmployeeId = 13,
                            Number = "2119385437",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 14,
                            EmployeeId = 14,
                            Number = "2109385453",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 15,
                            EmployeeId = 15,
                            Number = "2109385498",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 16,
                            EmployeeId = 16,
                            Number = "2109381111",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 17,
                            EmployeeId = 17,
                            Number = "2109381112",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 18,
                            EmployeeId = 18,
                            Number = "2109381113",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 19,
                            EmployeeId = 19,
                            Number = "2109381114",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 20,
                            EmployeeId = 20,
                            Number = "2109381115",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 21,
                            EmployeeId = 21,
                            Number = "2109381116",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 22,
                            EmployeeId = 22,
                            Number = "2109381117",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 23,
                            EmployeeId = 23,
                            Number = "2109381118",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 24,
                            EmployeeId = 24,
                            Number = "2109381119",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 25,
                            EmployeeId = 25,
                            Number = "2109381120",
                            PhoneType = (byte)2
                        },
                        new
                        {
                            Id = 26,
                            Number = "2109381121",
                            PhoneType = (byte)2,
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 27,
                            Number = "2109381122",
                            PhoneType = (byte)2,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 28,
                            Number = "2109381123",
                            PhoneType = (byte)2,
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 29,
                            Number = "2109381124",
                            PhoneType = (byte)2,
                            SupplierId = 4
                        },
                        new
                        {
                            Id = 30,
                            Number = "2109381125",
                            PhoneType = (byte)2,
                            SupplierId = 5
                        },
                        new
                        {
                            Id = 31,
                            Number = "2109381126",
                            PhoneType = (byte)2,
                            SupplierId = 6
                        },
                        new
                        {
                            Id = 32,
                            Number = "2109381127",
                            PhoneType = (byte)2,
                            SupplierId = 7
                        },
                        new
                        {
                            Id = 33,
                            Number = "2109381128",
                            PhoneType = (byte)2,
                            SupplierId = 8
                        },
                        new
                        {
                            Id = 34,
                            Number = "2109381129",
                            PhoneType = (byte)2,
                            SupplierId = 9
                        },
                        new
                        {
                            Id = 35,
                            Number = "2109381130",
                            PhoneType = (byte)2,
                            SupplierId = 10
                        },
                        new
                        {
                            Id = 36,
                            Number = "2109381131",
                            PhoneType = (byte)2,
                            SupplierId = 11
                        },
                        new
                        {
                            Id = 37,
                            Number = "2109381132",
                            PhoneType = (byte)2,
                            SupplierId = 12
                        },
                        new
                        {
                            Id = 38,
                            Number = "2109381133",
                            PhoneType = (byte)2,
                            SupplierId = 13
                        },
                        new
                        {
                            Id = 39,
                            Number = "2109381134",
                            PhoneType = (byte)2,
                            SupplierId = 14
                        },
                        new
                        {
                            Id = 40,
                            Number = "2109381135",
                            PhoneType = (byte)2,
                            SupplierId = 15
                        },
                        new
                        {
                            Id = 41,
                            Number = "2109381136",
                            PhoneType = (byte)2,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 42,
                            Number = "2109381137",
                            PhoneType = (byte)2,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 43,
                            Number = "2109381138",
                            PhoneType = (byte)2,
                            WarehouseId = 3
                        },
                        new
                        {
                            Id = 44,
                            Number = "2109381139",
                            PhoneType = (byte)2,
                            WarehouseId = 4
                        },
                        new
                        {
                            Id = 45,
                            CustomerId = 1,
                            Number = "2109381140",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 46,
                            CustomerId = 2,
                            Number = "2109381141",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 47,
                            CustomerId = 3,
                            Number = "2109381142",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 48,
                            CustomerId = 4,
                            Number = "2109381143",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 49,
                            CustomerId = 5,
                            Number = "2109381144",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 50,
                            CustomerId = 6,
                            Number = "2109381145",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 51,
                            CustomerId = 7,
                            Number = "2109381146",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 52,
                            CustomerId = 8,
                            Number = "2109381147",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 53,
                            CustomerId = 9,
                            Number = "2109381148",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 54,
                            CustomerId = 10,
                            Number = "2109381149",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 55,
                            CustomerId = 11,
                            Number = "2109381150",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 56,
                            CustomerId = 12,
                            Number = "2109381151",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 57,
                            CandidateId = 1,
                            Number = "2109381152",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 58,
                            CandidateId = 2,
                            Number = "2109381153",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 59,
                            CandidateId = 3,
                            Number = "2109381154",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 60,
                            CandidateId = 4,
                            Number = "2109381155",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 61,
                            CandidateId = 5,
                            Number = "2109381156",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 62,
                            CandidateId = 6,
                            Number = "2109381157",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 63,
                            CandidateId = 7,
                            Number = "2109381158",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 64,
                            CandidateId = 8,
                            Number = "2109381159",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 65,
                            CandidateId = 9,
                            Number = "2109381160",
                            PhoneType = (byte)1
                        },
                        new
                        {
                            Id = 66,
                            CandidateId = 10,
                            Number = "2109381161",
                            PhoneType = (byte)1
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Qualifications")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WorkExperience")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Degree = "Degree in relative field",
                            DepartmentId = 1,
                            Description = "Senior Recruiter for our small company",
                            IsActive = true,
                            Languages = "Greek, English",
                            Name = "Senior Recruiter",
                            Qualifications = "Strong Communication Skills",
                            WorkExperience = "Minimum 5 years of experience and a cover letter from your previous employer"
                        },
                        new
                        {
                            Id = 2,
                            Degree = "Degree in relative field",
                            DepartmentId = 1,
                            Description = "Junior Recruiter for our small company",
                            IsActive = true,
                            Languages = "Greek, English",
                            Name = "Junior Recruiter",
                            Qualifications = "Strong Communication Skills",
                            WorkExperience = "Minimum 2 years of experience and a cover letter from your previous employer"
                        },
                        new
                        {
                            Id = 3,
                            Degree = "Degree in relative field",
                            DepartmentId = 2,
                            Description = "Senior Procurement Manager for our small company",
                            IsActive = true,
                            Languages = "Greek, English",
                            Name = "Senior Procurement Manager",
                            Qualifications = "Creative Problem-Solcing",
                            WorkExperience = "Minimum 7 years of experience"
                        },
                        new
                        {
                            Id = 4,
                            Degree = "Degree in relative field",
                            DepartmentId = 3,
                            Description = "Senior Sales Analyst to manage our sales figures",
                            IsActive = true,
                            Languages = "Greek, English",
                            Name = "Senior Sales Analyst",
                            Qualifications = "Strong background in Math",
                            WorkExperience = "Minimum 4 years of experience"
                        },
                        new
                        {
                            Id = 5,
                            Degree = "Degree in relative field",
                            DepartmentId = 3,
                            Description = "Junior Sales Analyst who is willing to work for free",
                            IsActive = true,
                            Languages = "Greek, English",
                            Name = "Junior Sales Analyst",
                            Qualifications = "Willing to work for free",
                            WorkExperience = "Internship"
                        },
                        new
                        {
                            Id = 6,
                            Degree = "Degree in relative field",
                            DepartmentId = 4,
                            Description = "E-Shop Junior Developer for our company's e-shop",
                            IsActive = true,
                            Languages = "Greek, English",
                            Name = "E-Shop Junior Developer",
                            Qualifications = "Basic knowledge with any Object-Oriented programming language",
                            WorkExperience = "Minimum 2 years of experience in projects created with .net 5"
                        },
                        new
                        {
                            Id = 7,
                            Degree = "Degree in relative field",
                            DepartmentId = 4,
                            Description = "E-Shop Senior Developer for our company's e-shop",
                            IsActive = true,
                            Languages = "Greek, English",
                            Name = "E-Shop Senior Developer",
                            Qualifications = "Leadership skills and a strong programming background",
                            WorkExperience = "Minimum 6 years of experience in projects created with .net 5"
                        },
                        new
                        {
                            Id = 8,
                            Degree = "No need",
                            DepartmentId = 5,
                            Description = "Warehouse Worker for one of our local Warehouses",
                            IsActive = true,
                            Languages = "Greek, English",
                            Name = "Warehouse Worker",
                            Qualifications = "Strong physical skills",
                            WorkExperience = "Experience with getting your hands dirty"
                        },
                        new
                        {
                            Id = 9,
                            Degree = "Degree in relative field",
                            DepartmentId = 5,
                            Description = "Warehouse Manager to manage one of our local Warehouses",
                            IsActive = true,
                            Languages = "Greek, English",
                            Name = "Warehouse Manager",
                            Qualifications = "Logical-Thinking",
                            WorkExperience = "Utleast 3 years of experience in Warehouse management"
                        },
                        new
                        {
                            Id = 10,
                            Degree = "Degree in relative field",
                            DepartmentId = 6,
                            Description = "Senior Accountant to help us do our taxes",
                            IsActive = true,
                            Languages = "Greek, English",
                            Name = "Senior Accountant",
                            Qualifications = "How skilled are you with tax evasion?",
                            WorkExperience = "Utleast 5 years of experience"
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Category")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasCheckConstraint("cc_Product_Category", "Category IN (1,2,3)");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Barcode = "2000012334054567",
                            Category = (byte)1,
                            Description = "Clean cut black chocolate bar",
                            IsDeleted = false,
                            Name = "Darky",
                            Price = 7.5,
                            Weight = 0.10000000000000001
                        },
                        new
                        {
                            Id = 2,
                            Barcode = "2000012334154568",
                            Category = (byte)1,
                            Description = "Clean cut white chocolate bar",
                            IsDeleted = false,
                            Name = "Whitey",
                            Price = 7.5,
                            Weight = 0.10000000000000001
                        },
                        new
                        {
                            Id = 3,
                            Barcode = "2000012332454569",
                            Category = (byte)1,
                            Description = "Clean cut mix chocolate bar",
                            IsDeleted = false,
                            Name = "Mix-DaChoc",
                            Price = 10.5,
                            Weight = 0.10000000000000001
                        },
                        new
                        {
                            Id = 4,
                            Barcode = "2000013233454570",
                            Category = (byte)2,
                            Description = "The better type of bites",
                            IsDeleted = false,
                            Name = "Classy",
                            Price = 12.5,
                            Weight = 0.29999999999999999
                        },
                        new
                        {
                            Id = 5,
                            Barcode = "2000012343454571",
                            Category = (byte)3,
                            Description = "Super Wafer",
                            IsDeleted = false,
                            Name = "ChocoMist",
                            Price = 7.5,
                            Weight = 0.14999999999999999
                        },
                        new
                        {
                            Id = 6,
                            Barcode = "2000015233454572",
                            Category = (byte)2,
                            Description = "The Bites you didn't know you wanted!",
                            IsDeleted = false,
                            Name = "CoffeeFountain",
                            Price = 12.5,
                            Weight = 0.29999999999999999
                        },
                        new
                        {
                            Id = 7,
                            Barcode = "2000012334654573",
                            Category = (byte)2,
                            Description = "Oh that smell!",
                            IsDeleted = false,
                            Name = "Mystic Flavour",
                            Price = 13.5,
                            Weight = 0.29999999999999999
                        },
                        new
                        {
                            Id = 8,
                            Barcode = "2000012334547582",
                            Category = (byte)1,
                            Description = "So dark and sweet",
                            IsDeleted = false,
                            Name = "Dark Hell",
                            Price = 12.5,
                            Weight = 0.25
                        },
                        new
                        {
                            Id = 9,
                            Barcode = "2000012833454581",
                            Category = (byte)1,
                            Description = "So white and sweet",
                            IsDeleted = false,
                            Name = "White Heaven",
                            Price = 12.5,
                            Weight = 0.25
                        },
                        new
                        {
                            Id = 10,
                            Barcode = "2000012334954678",
                            Category = (byte)3,
                            Description = "Eat it drink it",
                            IsDeleted = false,
                            Name = "Milky Way",
                            Price = 10.5,
                            Weight = 0.25
                        },
                        new
                        {
                            Id = 11,
                            Barcode = "2001001233454623",
                            Category = (byte)1,
                            Description = "The taste you wanted",
                            IsDeleted = false,
                            Name = "Waffer Flavour",
                            Price = 10.5,
                            Weight = 0.29999999999999999
                        },
                        new
                        {
                            Id = 12,
                            Barcode = "2000012233454690",
                            Category = (byte)3,
                            Description = "Only for coffee addicts!",
                            IsDeleted = false,
                            Name = "Coffee Choco",
                            Price = 9.5,
                            Weight = 0.29999999999999999
                        },
                        new
                        {
                            Id = 13,
                            Barcode = "2000031233454671",
                            Category = (byte)3,
                            Description = "Golden Retriver Chocolate",
                            IsDeleted = false,
                            Name = "Golden Choice",
                            Price = 13.5,
                            Weight = 0.25
                        },
                        new
                        {
                            Id = 14,
                            Barcode = "2000401233454662",
                            Category = (byte)1,
                            Description = "Bittersweet love for all",
                            IsDeleted = false,
                            Name = "Bittersweet Love",
                            Price = 9.5,
                            Weight = 0.29999999999999999
                        },
                        new
                        {
                            Id = 15,
                            Barcode = "2005001233454673",
                            Category = (byte)1,
                            Description = "You drive me crazy",
                            IsDeleted = false,
                            Name = "Crazy Choco Loco",
                            Price = 8.5,
                            Weight = 0.20000000000000001
                        },
                        new
                        {
                            Id = 16,
                            Barcode = "2000601233454674",
                            Category = (byte)2,
                            Description = "Sugar sugar honey honey",
                            IsDeleted = false,
                            Name = "Sweet Choco of Mine",
                            Price = 9.5,
                            Weight = 0.29999999999999999
                        },
                        new
                        {
                            Id = 17,
                            Barcode = "2007001233454675",
                            Category = (byte)3,
                            Description = "The best taste",
                            IsDeleted = false,
                            Name = "Semisweet Lozan",
                            Price = 2.5,
                            Weight = 0.5
                        },
                        new
                        {
                            Id = 18,
                            Barcode = "200081233454655",
                            Category = (byte)1,
                            Description = "Sweet Arctic Choco",
                            IsDeleted = false,
                            Name = "Arabella",
                            Price = 6.5,
                            Weight = 0.5
                        },
                        new
                        {
                            Id = 19,
                            Barcode = "2000091233454690",
                            Category = (byte)1,
                            Description = "Couverture Chocolate",
                            IsDeleted = false,
                            Name = "Couverture",
                            Price = 2.5,
                            Weight = 0.29999999999999999
                        },
                        new
                        {
                            Id = 20,
                            Barcode = "20000123103454610",
                            Category = (byte)2,
                            Description = "Ruby Ruby Ruby",
                            IsDeleted = false,
                            Name = "Ruby Lozan",
                            Price = 10.5,
                            Weight = 0.29999999999999999
                        },
                        new
                        {
                            Id = 21,
                            Barcode = "2000101233454612",
                            Category = (byte)3,
                            Description = "Snap out of it",
                            IsDeleted = false,
                            Name = "Raw",
                            Price = 8.5,
                            Weight = 0.5
                        },
                        new
                        {
                            Id = 22,
                            Barcode = "2000021233454698",
                            Category = (byte)2,
                            Description = "Put an almold on me",
                            IsDeleted = false,
                            Name = "Almond Flavour",
                            Price = 9.5,
                            Weight = 0.90000000000000002
                        },
                        new
                        {
                            Id = 23,
                            Barcode = "2003001233454612",
                            Category = (byte)3,
                            Description = "One for the road",
                            IsDeleted = false,
                            Name = "Goji Berrie",
                            Price = 10.5,
                            Weight = 0.40000000000000002
                        },
                        new
                        {
                            Id = 24,
                            Barcode = "2000014233454613",
                            Category = (byte)1,
                            Description = "The truble tou want",
                            IsDeleted = false,
                            Name = "Crumble Truble",
                            Price = 9.5,
                            Weight = 0.20000000000000001
                        },
                        new
                        {
                            Id = 25,
                            Barcode = "2000012335454656",
                            Category = (byte)2,
                            Description = "For vegan lovers",
                            IsDeleted = false,
                            Name = "Vegan",
                            Price = 3.5,
                            Weight = 0.29999999999999999
                        },
                        new
                        {
                            Id = 26,
                            Barcode = "2000012363454689",
                            Category = (byte)3,
                            Description = "Old fashion choco",
                            IsDeleted = false,
                            Name = "Almond Milky",
                            Price = 9.5,
                            Weight = 0.10000000000000001
                        },
                        new
                        {
                            Id = 27,
                            Barcode = "2000012337454681",
                            Category = (byte)1,
                            Description = "The banana lovers",
                            IsDeleted = false,
                            Name = "Banana Dark",
                            Price = 10.5,
                            Weight = 0.80000000000000004
                        },
                        new
                        {
                            Id = 28,
                            Barcode = "2000012383454628",
                            Category = (byte)2,
                            Description = "Im in love with choco",
                            IsDeleted = false,
                            Name = "White Love",
                            Price = 2.5,
                            Weight = 0.10000000000000001
                        },
                        new
                        {
                            Id = 29,
                            Barcode = "2000012933454621",
                            Category = (byte)3,
                            Description = "I wanna get off with mystic choco",
                            IsDeleted = false,
                            Name = "Mystic Choco",
                            Price = 3.5,
                            Weight = 0.90000000000000002
                        },
                        new
                        {
                            Id = 30,
                            Barcode = "2000011233454629",
                            Category = (byte)2,
                            Description = "Four out of Five",
                            IsDeleted = false,
                            Name = "Sweet sweet",
                            Price = 4.5,
                            Weight = 0.80000000000000004
                        },
                        new
                        {
                            Id = 31,
                            Barcode = "2000011233454620",
                            Category = (byte)3,
                            Description = "Easy Choice",
                            IsDeleted = false,
                            Name = "Dark Almond",
                            Price = 6.5,
                            Weight = 0.69999999999999996
                        },
                        new
                        {
                            Id = 32,
                            Barcode = "2000021233454621",
                            Category = (byte)1,
                            Description = "The choice you wanted",
                            IsDeleted = false,
                            Name = "Vegan Almond",
                            Price = 5.5,
                            Weight = 0.10000000000000001
                        },
                        new
                        {
                            Id = 33,
                            Barcode = "2000031233454645",
                            Category = (byte)2,
                            Description = "The best way",
                            IsDeleted = false,
                            Name = "Milky Away",
                            Price = 9.5,
                            Weight = 0.20000000000000001
                        },
                        new
                        {
                            Id = 34,
                            Barcode = "2000041233454646",
                            Category = (byte)3,
                            Description = "Stairway to heaven",
                            IsDeleted = false,
                            Name = "Darky Way",
                            Price = 3.5,
                            Weight = 0.29999999999999999
                        },
                        new
                        {
                            Id = 35,
                            Barcode = "2000051233454640",
                            Category = (byte)1,
                            Description = "The bite that hurts",
                            IsDeleted = false,
                            Name = "Spooky Bite",
                            Price = 6.5,
                            Weight = 0.40000000000000002
                        },
                        new
                        {
                            Id = 36,
                            Barcode = "2000016233454645",
                            Category = (byte)2,
                            Description = "The one that never ends",
                            IsDeleted = false,
                            Name = "Waffer",
                            Price = 9.5,
                            Weight = 0.5
                        },
                        new
                        {
                            Id = 37,
                            Barcode = "2000012373454667",
                            Category = (byte)3,
                            Description = "I bet you look good",
                            IsDeleted = false,
                            Name = "Brown Monkey",
                            Price = 10.5,
                            Weight = 0.59999999999999998
                        },
                        new
                        {
                            Id = 38,
                            Barcode = "2000018233454661",
                            Category = (byte)1,
                            Description = "Sugar sugar, forever sugar",
                            IsDeleted = false,
                            Name = "Honey Honey",
                            Price = 2.5,
                            Weight = 0.69999999999999996
                        },
                        new
                        {
                            Id = 39,
                            Barcode = "2000012933454634",
                            Category = (byte)2,
                            Description = "The morning choice",
                            IsDeleted = false,
                            Name = "Adorable",
                            Price = 5.5,
                            Weight = 0.80000000000000004
                        },
                        new
                        {
                            Id = 40,
                            Barcode = "2000011233454635",
                            Category = (byte)3,
                            Description = "Best choice for developers",
                            IsDeleted = false,
                            Name = "CoffeScript",
                            Price = 2.5,
                            Weight = 0.29999999999999999
                        },
                        new
                        {
                            Id = 41,
                            Barcode = "2000021233454696",
                            Category = (byte)1,
                            Description = "B is for best",
                            IsDeleted = false,
                            Name = "Balaclava",
                            Price = 1.5,
                            Weight = 0.10000000000000001
                        },
                        new
                        {
                            Id = 42,
                            Barcode = "2000031233454691",
                            Category = (byte)2,
                            Description = "100% Cocoa",
                            IsDeleted = false,
                            Name = "Cocoa Power",
                            Price = 3.5,
                            Weight = 0.20000000000000001
                        },
                        new
                        {
                            Id = 43,
                            Barcode = "2000041233454678",
                            Category = (byte)3,
                            Description = "To tasty to love it",
                            IsDeleted = false,
                            Name = "Bittersweet Symphony",
                            Price = 4.5,
                            Weight = 0.29999999999999999
                        },
                        new
                        {
                            Id = 44,
                            Barcode = "2000051233454679",
                            Category = (byte)1,
                            Description = "The one you want share",
                            IsDeleted = false,
                            Name = "White Stripe",
                            Price = 5.5,
                            Weight = 0.40000000000000002
                        },
                        new
                        {
                            Id = 45,
                            Barcode = "2000016233454541",
                            Category = (byte)2,
                            Description = "Once you go black,you never go back",
                            IsDeleted = false,
                            Name = "Black Solo",
                            Price = 5.5,
                            Weight = 0.10000000000000001
                        },
                        new
                        {
                            Id = 46,
                            Barcode = "2000017233454551",
                            Category = (byte)3,
                            Description = "Gold on the chocolate",
                            IsDeleted = false,
                            Name = "Gold Gold Gold",
                            Price = 12.5,
                            Weight = 0.12
                        },
                        new
                        {
                            Id = 47,
                            Barcode = "2000012833454573",
                            Category = (byte)1,
                            Description = "The strong one",
                            IsDeleted = false,
                            Name = "Weight of Love",
                            Price = 11.5,
                            Weight = 0.13
                        },
                        new
                        {
                            Id = 48,
                            Barcode = "2000012334954561",
                            Category = (byte)2,
                            Description = "Psychotic taste",
                            IsDeleted = false,
                            Name = "El Camino",
                            Price = 12.5,
                            Weight = 0.20000000000000001
                        },
                        new
                        {
                            Id = 49,
                            Barcode = "2000012334541543",
                            Category = (byte)3,
                            Description = "If you want to lost your mind.Try it!",
                            IsDeleted = false,
                            Name = "Bellisimo",
                            Price = 2.5,
                            Weight = 0.29999999999999999
                        },
                        new
                        {
                            Id = 50,
                            Barcode = "2000021233454666",
                            Category = (byte)1,
                            Description = "Chocolate issues",
                            IsDeleted = false,
                            Name = "Pitsi Go",
                            Price = 8.5,
                            Weight = 0.5
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.ProductShelf", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ShelfId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "ShelfId");

                    b.HasIndex("ShelfId");

                    b.HasIndex("ProductId", "ShelfId")
                        .IsUnique();

                    b.ToTable("ProductShelves");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateReceived = new DateTime(2021, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 8
                        },
                        new
                        {
                            Id = 2,
                            DateReceived = new DateTime(2021, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 9
                        },
                        new
                        {
                            Id = 3,
                            DateReceived = new DateTime(2021, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 7
                        },
                        new
                        {
                            Id = 4,
                            DateReceived = new DateTime(2020, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 6
                        },
                        new
                        {
                            Id = 5,
                            DateReceived = new DateTime(2020, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 5
                        },
                        new
                        {
                            Id = 6,
                            DateReceived = new DateTime(2021, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 4
                        },
                        new
                        {
                            Id = 7,
                            DateReceived = new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 3
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.RawMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RawMaterials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dark Chocolate",
                            Price = 2.4500000000000002
                        },
                        new
                        {
                            Id = 2,
                            Name = "White Chocolate",
                            Price = 2.3500000000000001
                        },
                        new
                        {
                            Id = 3,
                            Name = "Milk Chocolate",
                            Price = 3.1499999999999999
                        },
                        new
                        {
                            Id = 4,
                            Name = "Waffer",
                            Price = 4.5
                        },
                        new
                        {
                            Id = 5,
                            Name = "CoffeSyrup",
                            Price = 3.5
                        },
                        new
                        {
                            Id = 6,
                            Name = "Golden Retriever Chocolate",
                            Price = 2.5
                        },
                        new
                        {
                            Id = 7,
                            Name = "Cocoa Chocolate",
                            Price = 2.5
                        },
                        new
                        {
                            Id = 8,
                            Name = "Cocoa Power",
                            Price = 2.5
                        },
                        new
                        {
                            Id = 9,
                            Name = "Bittersweet Chocolate",
                            Price = 2.3500000000000001
                        },
                        new
                        {
                            Id = 10,
                            Name = "Baking Chocolate",
                            Price = 3.1499999999999999
                        },
                        new
                        {
                            Id = 11,
                            Name = "Semisweet Chocolate",
                            Price = 4.5
                        },
                        new
                        {
                            Id = 12,
                            Name = "Sweet German Chocolate",
                            Price = 3.5
                        },
                        new
                        {
                            Id = 13,
                            Name = "Couverture Chocolate",
                            Price = 2.5
                        },
                        new
                        {
                            Id = 14,
                            Name = "Ruby",
                            Price = 4.5
                        },
                        new
                        {
                            Id = 15,
                            Name = "Raw Chocolate",
                            Price = 3.5
                        },
                        new
                        {
                            Id = 16,
                            Name = "Almond Chocolate",
                            Price = 2.5
                        },
                        new
                        {
                            Id = 17,
                            Name = "Goji Berries Chocolate",
                            Price = 3.1499999999999999
                        },
                        new
                        {
                            Id = 18,
                            Name = "Crumbe Chocolate",
                            Price = 2.5
                        },
                        new
                        {
                            Id = 19,
                            Name = "Vegan Chocolate",
                            Price = 2.5
                        },
                        new
                        {
                            Id = 20,
                            Name = "Almond Milk Chocolate",
                            Price = 2.3500000000000001
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.RawMaterialProduct", b =>
                {
                    b.Property<int>("RawMaterialId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("RawMaterialId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RawMaterialId", "ProductId")
                        .IsUnique();

                    b.ToTable("RawMaterialProducts");

                    b.HasData(
                        new
                        {
                            RawMaterialId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            RawMaterialId = 5,
                            ProductId = 3
                        },
                        new
                        {
                            RawMaterialId = 4,
                            ProductId = 2
                        },
                        new
                        {
                            RawMaterialId = 8,
                            ProductId = 10
                        },
                        new
                        {
                            RawMaterialId = 16,
                            ProductId = 5
                        },
                        new
                        {
                            RawMaterialId = 13,
                            ProductId = 9
                        },
                        new
                        {
                            RawMaterialId = 6,
                            ProductId = 19
                        },
                        new
                        {
                            RawMaterialId = 12,
                            ProductId = 11
                        },
                        new
                        {
                            RawMaterialId = 2,
                            ProductId = 20
                        },
                        new
                        {
                            RawMaterialId = 14,
                            ProductId = 34
                        },
                        new
                        {
                            RawMaterialId = 1,
                            ProductId = 42
                        },
                        new
                        {
                            RawMaterialId = 3,
                            ProductId = 32
                        },
                        new
                        {
                            RawMaterialId = 5,
                            ProductId = 23
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.RawMaterialShelf", b =>
                {
                    b.Property<int>("RawMaterialId")
                        .HasColumnType("int");

                    b.Property<int>("ShelfId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("RawMaterialId", "ShelfId");

                    b.HasIndex("ShelfId");

                    b.ToTable("RawMaterialShelves");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.RawMaterialSupplier", b =>
                {
                    b.Property<int>("RawMaterialId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("RawMaterialId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("RawMaterialSuppliers");

                    b.HasData(
                        new
                        {
                            RawMaterialId = 1,
                            SupplierId = 1
                        },
                        new
                        {
                            RawMaterialId = 3,
                            SupplierId = 1
                        },
                        new
                        {
                            RawMaterialId = 2,
                            SupplierId = 2
                        },
                        new
                        {
                            RawMaterialId = 6,
                            SupplierId = 2
                        },
                        new
                        {
                            RawMaterialId = 1,
                            SupplierId = 3
                        },
                        new
                        {
                            RawMaterialId = 3,
                            SupplierId = 3
                        },
                        new
                        {
                            RawMaterialId = 4,
                            SupplierId = 3
                        },
                        new
                        {
                            RawMaterialId = 1,
                            SupplierId = 4
                        },
                        new
                        {
                            RawMaterialId = 4,
                            SupplierId = 4
                        },
                        new
                        {
                            RawMaterialId = 1,
                            SupplierId = 5
                        },
                        new
                        {
                            RawMaterialId = 2,
                            SupplierId = 5
                        },
                        new
                        {
                            RawMaterialId = 1,
                            SupplierId = 6
                        },
                        new
                        {
                            RawMaterialId = 2,
                            SupplierId = 6
                        },
                        new
                        {
                            RawMaterialId = 5,
                            SupplierId = 6
                        },
                        new
                        {
                            RawMaterialId = 1,
                            SupplierId = 7
                        },
                        new
                        {
                            RawMaterialId = 5,
                            SupplierId = 7
                        },
                        new
                        {
                            RawMaterialId = 6,
                            SupplierId = 7
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StorageUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StorageUnitId");

                    b.ToTable("Sectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sector 1",
                            StorageUnitId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sector 2",
                            StorageUnitId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sector 3",
                            StorageUnitId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sector 4",
                            StorageUnitId = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sector 5",
                            StorageUnitId = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sector 6",
                            StorageUnitId = 6
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sector 7",
                            StorageUnitId = 7
                        },
                        new
                        {
                            Id = 8,
                            Name = "Sector 8",
                            StorageUnitId = 8
                        },
                        new
                        {
                            Id = 9,
                            Name = "Sector 9",
                            StorageUnitId = 9
                        },
                        new
                        {
                            Id = 10,
                            Name = "Sector 10",
                            StorageUnitId = 10
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Shelf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.ToTable("Shelves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Shelf 1",
                            SectorId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Shelf 2",
                            SectorId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Shelf 3",
                            SectorId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Shelf 4",
                            SectorId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "Shelf 5",
                            SectorId = 3
                        },
                        new
                        {
                            Id = 6,
                            Name = "Shelf 6",
                            SectorId = 3
                        },
                        new
                        {
                            Id = 7,
                            Name = "Shelf 7",
                            SectorId = 4
                        },
                        new
                        {
                            Id = 8,
                            Name = "Shelf 8",
                            SectorId = 4
                        },
                        new
                        {
                            Id = 9,
                            Name = "Shelf 9",
                            SectorId = 5
                        },
                        new
                        {
                            Id = 10,
                            Name = "Shelf 10",
                            SectorId = 5
                        },
                        new
                        {
                            Id = 11,
                            Name = "Shelf 11",
                            SectorId = 6
                        },
                        new
                        {
                            Id = 12,
                            Name = "Shelf 12",
                            SectorId = 6
                        },
                        new
                        {
                            Id = 13,
                            Name = "Shelf 13",
                            SectorId = 7
                        },
                        new
                        {
                            Id = 14,
                            Name = "Shelf 14",
                            SectorId = 7
                        },
                        new
                        {
                            Id = 15,
                            Name = "Shelf 15",
                            SectorId = 8
                        },
                        new
                        {
                            Id = 16,
                            Name = "Shelf 16",
                            SectorId = 8
                        },
                        new
                        {
                            Id = 17,
                            Name = "Shelf 17",
                            SectorId = 9
                        },
                        new
                        {
                            Id = 18,
                            Name = "Shelf 18",
                            SectorId = 9
                        },
                        new
                        {
                            Id = 19,
                            Name = "Shelf 19",
                            SectorId = 10
                        },
                        new
                        {
                            Id = 20,
                            Name = "Shelf 20",
                            SectorId = 10
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.StorageUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StorageUnits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "S1",
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "S2",
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "S3",
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "S4",
                            WarehouseId = 3
                        },
                        new
                        {
                            Id = 5,
                            Name = "S5",
                            WarehouseId = 4
                        },
                        new
                        {
                            Id = 6,
                            Name = "S6",
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "S7",
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "S8",
                            WarehouseId = 3
                        },
                        new
                        {
                            Id = 9,
                            Name = "S9",
                            WarehouseId = 4
                        },
                        new
                        {
                            Id = 10,
                            Name = "S10",
                            WarehouseId = 1
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AlphaChoc",
                            Type = "SA"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DreamLine",
                            Type = "SA"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Papavlaxos",
                            Type = "LTD"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Marmita",
                            Type = "LLC"
                        },
                        new
                        {
                            Id = 5,
                            Name = "GiannaImport",
                            Type = "SA"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ifet",
                            Type = "SA"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Gene",
                            Type = "LLC"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Light",
                            Type = "LLC"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Echo",
                            Type = "LTD"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Paradise",
                            Type = "SA"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Cosmos",
                            Type = "LTD"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Business",
                            Type = "SA"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Systems",
                            Type = "LLC"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Rest",
                            Type = "SA"
                        },
                        new
                        {
                            Id = 15,
                            Name = "CBS",
                            Type = "LTD"
                        });
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = false,
                            Name = "Athens Warehouse"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = false,
                            Name = "Vienna Warehouse"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = false,
                            Name = "Reykjavik Warehouse"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = false,
                            Name = "Amsterdam Warehouse"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "4a140611-352b-4d33-a52f-ba5b68df0ea4",
                            ConcurrencyStamp = "85bdee88-7a53-4b00-8671-64d0d4d9141c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "70d42415-4006-40be-98b6-2ba981ef8dc2",
                            ConcurrencyStamp = "2f45f598-b142-4f90-9505-715066f8a49b",
                            Name = "Accounting",
                            NormalizedName = "ACCOUNTING"
                        },
                        new
                        {
                            Id = "130ff858-5251-4344-998a-216b0d98d181",
                            ConcurrencyStamp = "62661325-41cf-4910-b721-b5b222db991e",
                            Name = "HR",
                            NormalizedName = "HR"
                        },
                        new
                        {
                            Id = "91516112-cf50-4f2b-81f7-e9e09e193999",
                            ConcurrencyStamp = "788f7708-320d-4d68-868d-02dff87308b4",
                            Name = "DepartmentHead",
                            NormalizedName = "DEPARTMENTHEAD"
                        },
                        new
                        {
                            Id = "8b7174ec-6d91-4b05-9f5b-fb2014650d75",
                            ConcurrencyStamp = "78e8d753-6767-4bb5-92e4-05f2ce9439fb",
                            Name = "Warehouse",
                            NormalizedName = "WAREHOUSE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "e1802e5e-a448-4c4e-841c-40b8a0de9dbf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac7fb226-d899-4623-b840-e770804814cc",
                            Email = "Takis@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TAKIS@GMAIL.COM",
                            NormalizedUserName = "TAKIS",
                            PasswordHash = "AQAAAAEAACcQAAAAEFf5qKjCuRDKWZkkSJ716tewd6v23V44SauQCx/N3x2VgjIuMy/hTFnq361m26Lflg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c694c18-c80d-4878-9cd2-2e41ac3c90f5",
                            TwoFactorEnabled = false,
                            UserName = "Takis"
                        },
                        new
                        {
                            Id = "f6afa472-95ed-4220-bc3a-0c212afa15db",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3f2a8fb-b104-478b-9137-4bfa021b4a4f",
                            Email = "Hermes@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HERMES@GMAIL.COM",
                            NormalizedUserName = "HERMES",
                            PasswordHash = "AQAAAAEAACcQAAAAEG7qhPPdD65NypIg/NmYiFkyNAhboF3hfsCWHO69uFsAG+bGmGz//kZnydR/h9IyqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e99234d4-9b63-48f3-b545-583300bcd119",
                            TwoFactorEnabled = false,
                            UserName = "Hermes"
                        },
                        new
                        {
                            Id = "aeab492c-eb08-4a29-b6d9-0b936a292116",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c05ed543-6af9-4e8e-8f85-9a4384c06c14",
                            Email = "Angela@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANGELA@GMAIL.COM",
                            NormalizedUserName = "ANGELA",
                            PasswordHash = "AQAAAAEAACcQAAAAELD77vHT4CimSWGedqqkKYLzt1VzIj9uTTxmV4EUbkExs5KPUoG30ycjne3L+opCLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90ea22c0-88d1-4833-8984-8c5248831498",
                            TwoFactorEnabled = false,
                            UserName = "Angela"
                        },
                        new
                        {
                            Id = "cd97911d-e70c-4a33-8365-ca3c69189215",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "175bae01-0e5f-4bf9-ba53-9fabf74e142b",
                            Email = "Thanasis@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "THANASIS@GMAIL.COM",
                            NormalizedUserName = "THANASIS",
                            PasswordHash = "AQAAAAEAACcQAAAAEC4TTwCs4adfBCYWOFl7BV095LXwKDQ3grId89ZoTgt/xFCeArn6TRE+BdWOCPIZXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c09797b-cc22-41f4-9d29-cfbd392eecb8",
                            TwoFactorEnabled = false,
                            UserName = "Thanasis"
                        },
                        new
                        {
                            Id = "9e7b14d3-81eb-456a-a755-33d25dc1fd98",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97ca15b3-b2d5-4642-9465-edf42aa053be",
                            Email = "Vasilis@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VASILIS@GMAIL.COM",
                            NormalizedUserName = "VASILIS",
                            PasswordHash = "AQAAAAEAACcQAAAAEGRWIZs85b+byOmGoGaed6WtVOJ8YDzCnoXtqPoYDTPvp7nfgCvs9BzOfWp3U1tgUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "799115fc-2125-476b-989e-126c03b4ea95",
                            TwoFactorEnabled = false,
                            UserName = "Vasilis"
                        },
                        new
                        {
                            Id = "d5e7fbf5-2be9-4e35-adf6-d6df34b0d4dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a8e92be-712a-43b2-8be5-01fe7729449f",
                            Email = "Ferenc@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FERENC@GMAIL.COM",
                            NormalizedUserName = "FERENC",
                            PasswordHash = "AQAAAAEAACcQAAAAEICvX9/Bpy95egUqIV0TfSj2gpU4IbaeQ6wGV1CN7zoH1oCOSfOTdxxwMtyGT/Kedg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1834d10-9755-42ee-a830-efa1ef2cbcb0",
                            TwoFactorEnabled = false,
                            UserName = "Ferenc"
                        },
                        new
                        {
                            Id = "01cac9a3-aac4-459c-b879-04af9d1f07ee",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62acb82b-542e-4810-8260-1d0b9d564e06",
                            Email = "Tseplo@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TSEPLO@GMAIL.COM",
                            NormalizedUserName = "TSEPLO",
                            PasswordHash = "AQAAAAEAACcQAAAAENRF28npV+Zh845Kq+BypTDsP3qfLnx66RwnUJqIoVDopnEaDLNg2Y/nm+mk2j9PYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f3d5937-3d4d-4d69-bf10-6bfd04a0ee45",
                            TwoFactorEnabled = false,
                            UserName = "Tseplo"
                        },
                        new
                        {
                            Id = "499a186a-847a-44bb-ac77-c8e07cdb1251",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1404c3a1-6b9b-4dfc-b350-ec11ecb68c44",
                            Email = "Shepllo@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SHEPLLO@GMAIL.COM",
                            NormalizedUserName = "SHEPLLO",
                            PasswordHash = "AQAAAAEAACcQAAAAEFwJhVKHtbdYxw/rqBTIGp6bUDSIcv2JQ72ZKbLG57vFkeI9UhsQBJHQKepN5YgRWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51644e51-ee6b-4136-a3fc-c76c834549d4",
                            TwoFactorEnabled = false,
                            UserName = "Shepllo"
                        },
                        new
                        {
                            Id = "907f51e7-8c3c-431a-8796-0e79f6a36630",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60c61e7a-1a67-49ca-a6b5-3314edf53f17",
                            Email = "Spooky@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SPOOKY@GMAIL.COM",
                            NormalizedUserName = "SPOOKY",
                            PasswordHash = "AQAAAAEAACcQAAAAENNxeI9P6y77e75qen9d2ycsBhRUDRA20+eQSdzbtVgK06Ym+7Lq2Yrt0bIryjHCCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8694a247-8358-4437-a0e6-e62a6871ae1e",
                            TwoFactorEnabled = false,
                            UserName = "Spooky"
                        },
                        new
                        {
                            Id = "4c81c4fe-ece4-43fb-af0d-1b7077eeeb04",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7582e62-69ad-4816-81cb-b47b56e63caf",
                            Email = "Masikins-Siatis@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MASKINIS-SIATIS@GMAIL.COM",
                            NormalizedUserName = "MASKINIS-SIATIS",
                            PasswordHash = "AQAAAAEAACcQAAAAEBcNOkNozFj+gALBApL2WYhDMCSMk6QtnOKFZ3JgSamjiMX7O9nQIAsAUZboQBWoVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "348d6fa5-05ca-45a1-8bd4-d6cc8f7e3758",
                            TwoFactorEnabled = false,
                            UserName = "Maskinis-Siatis"
                        },
                        new
                        {
                            Id = "a620855c-c81a-4720-8c5f-cf724e1d0951",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5662fc43-9968-42d7-8d0d-7f93769a6653",
                            Email = "Zouzoulas@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ZOUZOULAS@GMAIL.COM",
                            NormalizedUserName = "ZOUZOULAS",
                            PasswordHash = "AQAAAAEAACcQAAAAEHQ+3Ek6/n4yYWjnB06Emhn5KBhXylPwSgs0CZxywVwqo9YaCQC222YHsf+TU9R0wg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de7f7123-ccb6-4efa-ad50-b3317458e06d",
                            TwoFactorEnabled = false,
                            UserName = "Zouzoulas"
                        },
                        new
                        {
                            Id = "60a94fc9-9ee5-4923-904c-6622c42d9e99",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3482c9b-b64e-468a-9c67-cb15203b16cc",
                            Email = "Nik@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NIK@GMAIL.COM",
                            NormalizedUserName = "NIK",
                            PasswordHash = "AQAAAAEAACcQAAAAEKz9qwyddqVH5RWVnqDSTjgPuTkgA7x4OrvpbSLzZ5huWh5yYj2GGBfXpxGowaAwow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb158256-3334-46a0-a624-0e7c97571404",
                            TwoFactorEnabled = false,
                            UserName = "Nik"
                        },
                        new
                        {
                            Id = "40e78c1b-3314-4ad8-9a13-d3f5ec7965bf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ddda6c05-0301-4e45-b7c6-bc8c9bb6bb81",
                            Email = "Paris@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PARIS@GMAIL.COM",
                            NormalizedUserName = "PARIS",
                            PasswordHash = "AQAAAAEAACcQAAAAEPjoyULzzNx7CcQjb6yHJYFAsf1qjNY9j5t48MvNGLmu28zBqjjDmaRJPMkPv4j7iA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73721c81-1a42-4b19-b1ea-47384896990b",
                            TwoFactorEnabled = false,
                            UserName = "Paris"
                        },
                        new
                        {
                            Id = "64fe3c64-6cf0-4de3-8e53-917825b2528e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "918f3216-8ef9-43fe-ae49-1158227cd6cd",
                            Email = "Zongia@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ZONGIA@GMAIL.COM",
                            NormalizedUserName = "ZONGIA",
                            PasswordHash = "AQAAAAEAACcQAAAAECMTTh2In/yA2KpQxlE+EAbayEcOCvz8yOI5aZqejdE+nNrJ+82NldJpubB0WFdhxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "69af5815-4ca8-4787-851c-b564ef36bc48",
                            TwoFactorEnabled = false,
                            UserName = "Zongia"
                        },
                        new
                        {
                            Id = "9cdad891-9814-4b2f-b769-74b9e2a8e836",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "321caaf5-218e-40f2-8e4e-e0945408cbcb",
                            Email = "Boltis@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOLTSIS@GMAIL.COM",
                            NormalizedUserName = "BOLTSIS",
                            PasswordHash = "AQAAAAEAACcQAAAAEC2/NnnEzSQAHqks3tOl7hYoAaQfH6+BesuGz03gPVt0Gk30B4QnYlghucTfhoQuIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d93743f1-8a01-4375-ac7c-b1272c13c27a",
                            TwoFactorEnabled = false,
                            UserName = "Boltis"
                        },
                        new
                        {
                            Id = "c9342ed5-bcf6-47d3-95f9-84a95b7f19f3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "716af3ee-f91f-4326-95b4-e012fc874008",
                            Email = "Poltis@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "POLTSIS@GMAIL.COM",
                            NormalizedUserName = "POLTSIS",
                            PasswordHash = "AQAAAAEAACcQAAAAEPhxTRXsfVT7cqaxAhCFrU0CE58wO9Gy7uCWEctn9x5moOhYFib46xG+yludYFsdHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a607e06b-9c5d-4644-a7df-596003a37b61",
                            TwoFactorEnabled = false,
                            UserName = "Poltis"
                        },
                        new
                        {
                            Id = "d066e575-39cd-4ed5-b9e2-bfaeb08999e1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "159bf534-86cc-4bb7-9ac3-44444c27c112",
                            Email = "Koltis@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KOLTSIS@GMAIL.COM",
                            NormalizedUserName = "KOLTSIS",
                            PasswordHash = "AQAAAAEAACcQAAAAEMraWtY8go+cKKZdrpNJ5uPqlyuYYcqQIW8Aj1+6KKLJZpsTXXfh96LNatPS4E/O/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cfbe5b4d-81d2-4d82-84c0-bd21d52bfb2f",
                            TwoFactorEnabled = false,
                            UserName = "Koltsis"
                        },
                        new
                        {
                            Id = "9048a711-c953-47de-8319-9f57cb2347ba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0d4e232-81a3-4d6f-9be4-bd0075d40c5f",
                            Email = "Pitsi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PITSI@GMAIL.COM",
                            NormalizedUserName = "PITSI",
                            PasswordHash = "AQAAAAEAACcQAAAAED6X6Htt4Jq5KT6Gre7YO0h1RaO2gmU1XPpGF2/y+sQSmSYn8iJohNeSVFIwMcaVdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48f31c91-7a92-4e4b-b058-66f412e99fcc",
                            TwoFactorEnabled = false,
                            UserName = "Pitsi"
                        },
                        new
                        {
                            Id = "a8f92bc6-3d6b-4315-8101-acea88fe480a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04911b76-1dd7-4f5f-9103-d673f1686428",
                            Email = "TiKsereis@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TIKSEREIS@GMAIL.COM",
                            NormalizedUserName = "TIKSEREIS",
                            PasswordHash = "AQAAAAEAACcQAAAAEEXFGzQXAXOmJhs/cIjSat3wc9gmkUkNBGUB+AFgomXAzJNEzuAtIi71TTFmH3IEDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "011910e0-3822-44cf-a116-7956715dbe62",
                            TwoFactorEnabled = false,
                            UserName = "TiKsereis"
                        },
                        new
                        {
                            Id = "fd5aeaed-9088-457d-b91d-8c9074ef6c14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e89f89d1-e311-4db2-b5e3-261941bf798b",
                            Email = "PikaPika@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PIKAPIKA@GMAIL.COM",
                            NormalizedUserName = "PIKAPIKA",
                            PasswordHash = "AQAAAAEAACcQAAAAEIn6BrTLc4PqvWvxDPa5pxdvc8GYmJ5UHUXQoWDAvRBAOjYmTR0+Rk7iU8e18AKW0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6640f11f-120f-4b41-a66c-4769e3c67a20",
                            TwoFactorEnabled = false,
                            UserName = "PikaPika"
                        },
                        new
                        {
                            Id = "ed6ea617-258e-41e9-8c1c-5c4823c5e87f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd3504b0-ec3f-4eae-a5cf-127af7845707",
                            Email = "Bella@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BELLA@GMAIL.COM",
                            NormalizedUserName = "BELLA",
                            PasswordHash = "AQAAAAEAACcQAAAAEF6nhTUV1iNpUnpX4P2pdhM6VcRrls/iVVJldLk8wRxvEMAoQdeBcUXl01VlhJjc7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d594a9b1-6add-4dc0-969d-02638176c62d",
                            TwoFactorEnabled = false,
                            UserName = "Bella"
                        },
                        new
                        {
                            Id = "5b60d6d4-5351-4f6a-9e0e-8acaa79daf94f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ef500dec-2ada-48cb-8871-e57896bc6271",
                            Email = "Kamatero@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KAMATERO@GMAIL.COM",
                            NormalizedUserName = "KAMATERO",
                            PasswordHash = "AQAAAAEAACcQAAAAEAvJCS0Q8REUE67ubD9BJUlNdPiyHZYNKOz/p88lh2cBY5awXAOQDxfhXd+uWsZAEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c476cb73-83d9-4dae-a714-656d4da82b51",
                            TwoFactorEnabled = false,
                            UserName = "Kamatero"
                        },
                        new
                        {
                            Id = "2a023c9a-1676-4bf2-8ee8-a98b11e961d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68e48e5e-79a7-4424-998c-058b78fedccd",
                            Email = "EasyBrizzy@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EASYBRIZZY@GMAIL.COM",
                            NormalizedUserName = "EASYBRIZZY",
                            PasswordHash = "AQAAAAEAACcQAAAAEJT2g5NyqXxLHl6BEM6CwWv60UrNJPaTXErBlAEfJZgLw38q9Ek2aIAYRDTtN9x3XQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ca835e0-d1d2-4477-a35e-eff3fb2c20c7",
                            TwoFactorEnabled = false,
                            UserName = "EasyBrizzy"
                        },
                        new
                        {
                            Id = "437c2a07-2931-43de-9dfb-4d415247c508",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de2ff312-233b-4776-bb1d-569680e00969",
                            Email = "Wow@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WOW@GMAIL.COM",
                            NormalizedUserName = "WOW",
                            PasswordHash = "AQAAAAEAACcQAAAAEMiNvzEVecIj/K/WqyVMdck7u8uMvyCQlZLgEXEU7cGdtiBMze5OH2W1ZoDI/yuNCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe3a061f-5ee5-48e3-b1b8-41dd80ee917a",
                            TwoFactorEnabled = false,
                            UserName = "Wow"
                        },
                        new
                        {
                            Id = "c4c6f346-65b7-4dda-97ce-4422eb58013a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d07af7d-56ec-42f7-9a56-078380007221",
                            Email = "Winchester@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WINCHESTER@GMAIL.COM",
                            NormalizedUserName = "WINCHESTER",
                            PasswordHash = "AQAAAAEAACcQAAAAEEOlNlM+bStZqD7yKc6VY1hpActr6aRE0+2lmLJQuK1TZKn+Q0eMC7KoufY1g+fUZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ab69511-9415-4aa2-99bc-27cc909ad920",
                            TwoFactorEnabled = false,
                            UserName = "Winchester"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "e1802e5e-a448-4c4e-841c-40b8a0de9dbf",
                            RoleId = "4a140611-352b-4d33-a52f-ba5b68df0ea4"
                        },
                        new
                        {
                            UserId = "cd97911d-e70c-4a33-8365-ca3c69189215",
                            RoleId = "70d42415-4006-40be-98b6-2ba981ef8dc2"
                        },
                        new
                        {
                            UserId = "aeab492c-eb08-4a29-b6d9-0b936a292116",
                            RoleId = "130ff858-5251-4344-998a-216b0d98d181"
                        },
                        new
                        {
                            UserId = "9e7b14d3-81eb-456a-a755-33d25dc1fd98",
                            RoleId = "8b7174ec-6d91-4b05-9f5b-fb2014650d75"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Address", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Candidate", "Candidate")
                        .WithMany("Addresses")
                        .HasForeignKey("CandidateId");

                    b.HasOne("Chocolate.DataAccess.Models.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Chocolate.DataAccess.Models.Employee", "Employee")
                        .WithMany("Addresses")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Chocolate.DataAccess.Models.Supplier", "Supplier")
                        .WithMany("Addresses")
                        .HasForeignKey("SupplierId");

                    b.HasOne("Chocolate.DataAccess.Models.Warehouse", "Warehouse")
                        .WithMany("Addresses")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Candidate");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.CandidatePosition", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Candidate", "Candidate")
                        .WithMany("CandidatePositions")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chocolate.DataAccess.Models.Position", "Position")
                        .WithMany("CandidatePositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Discount", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Supplier", "Supplier")
                        .WithMany("Discounts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.DiscountLevel", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Discount", "Discount")
                        .WithMany("Levels")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Email", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Candidate", "Candidate")
                        .WithMany("Emails")
                        .HasForeignKey("CandidateId");

                    b.HasOne("Chocolate.DataAccess.Models.Customer", "Customer")
                        .WithMany("Emails")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Chocolate.DataAccess.Models.Employee", "Employee")
                        .WithMany("Emails")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Chocolate.DataAccess.Models.Supplier", "Supplier")
                        .WithMany("Emails")
                        .HasForeignKey("SupplierId");

                    b.HasOne("Chocolate.DataAccess.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Candidate");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Employee", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.EmployeeMeeting", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Employee", "Employee")
                        .WithMany("EmployeeMeetings")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Chocolate.DataAccess.Models.Meeting", "Meeting")
                        .WithMany("EmployeeMeetings")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Favorite", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Customer", "Customer")
                        .WithMany("Favorites")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chocolate.DataAccess.Models.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Interview", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chocolate.DataAccess.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Leave", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Employee", "Employee")
                        .WithMany("Leaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.LeaveHistory", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Leave", "Leave")
                        .WithMany("LeaveHistories")
                        .HasForeignKey("LeaveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Leave");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Meeting", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Offer", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.DiscountLevel", "DiscountLevel")
                        .WithMany()
                        .HasForeignKey("DiscountLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chocolate.DataAccess.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chocolate.DataAccess.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DiscountLevel");

                    b.Navigation("Employee");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.OfferItem", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Offer", "Offer")
                        .WithMany("OfferItems")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chocolate.DataAccess.Models.RawMaterial", "RawMaterial")
                        .WithMany("OfferItems")
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Order", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.OrderProduct", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chocolate.DataAccess.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Phone", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Candidate", "Candidate")
                        .WithMany("Phones")
                        .HasForeignKey("CandidateId");

                    b.HasOne("Chocolate.DataAccess.Models.Customer", "Customer")
                        .WithMany("Phones")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Chocolate.DataAccess.Models.Employee", "Employee")
                        .WithMany("Phones")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Chocolate.DataAccess.Models.Supplier", "Supplier")
                        .WithMany("Phones")
                        .HasForeignKey("SupplierId");

                    b.HasOne("Chocolate.DataAccess.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Candidate");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Photo", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Position", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.ProductShelf", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Product", "Product")
                        .WithMany("Shelves")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chocolate.DataAccess.Models.Shelf", "Shelf")
                        .WithMany("Products")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Purchase", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chocolate.DataAccess.Models.Supplier", null)
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.RawMaterialProduct", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Product", "Product")
                        .WithMany("RawMaterialProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chocolate.DataAccess.Models.RawMaterial", "RawMaterial")
                        .WithMany("Products")
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.RawMaterialShelf", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.RawMaterial", "RawMaterial")
                        .WithMany("Shelves")
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chocolate.DataAccess.Models.Shelf", "Shelf")
                        .WithMany("RawMaterials")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawMaterial");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.RawMaterialSupplier", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.RawMaterial", "RawMaterial")
                        .WithMany("Suppliers")
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chocolate.DataAccess.Models.Supplier", "Supplier")
                        .WithMany("RawMaterials")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawMaterial");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Sector", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.StorageUnit", "StorageUnit")
                        .WithMany("Sectors")
                        .HasForeignKey("StorageUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StorageUnit");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Shelf", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Sector", "Sector")
                        .WithMany("Shelves")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.StorageUnit", b =>
                {
                    b.HasOne("Chocolate.DataAccess.Models.Warehouse", "Warehouse")
                        .WithMany("StorageUnits")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Candidate", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CandidatePositions");

                    b.Navigation("Emails");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Emails");

                    b.Navigation("Favorites");

                    b.Navigation("Orders");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Discount", b =>
                {
                    b.Navigation("Levels");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Employee", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Emails");

                    b.Navigation("EmployeeMeetings");

                    b.Navigation("Leaves");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Leave", b =>
                {
                    b.Navigation("LeaveHistories");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Meeting", b =>
                {
                    b.Navigation("EmployeeMeetings");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Offer", b =>
                {
                    b.Navigation("OfferItems");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Position", b =>
                {
                    b.Navigation("CandidatePositions");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Product", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("OrderProducts");

                    b.Navigation("Photos");

                    b.Navigation("RawMaterialProducts");

                    b.Navigation("Shelves");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.RawMaterial", b =>
                {
                    b.Navigation("OfferItems");

                    b.Navigation("Products");

                    b.Navigation("Shelves");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Sector", b =>
                {
                    b.Navigation("Shelves");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Shelf", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("RawMaterials");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.StorageUnit", b =>
                {
                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Supplier", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Discounts");

                    b.Navigation("Emails");

                    b.Navigation("Phones");

                    b.Navigation("Purchases");

                    b.Navigation("RawMaterials");
                });

            modelBuilder.Entity("Chocolate.DataAccess.Models.Warehouse", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("StorageUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
